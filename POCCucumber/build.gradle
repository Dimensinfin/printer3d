// - P L U G I N S
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.2.2.RELEASE'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
    }
}
plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'maven-publish'
    id 'project-report'
    id 'idea'
    id 'jacoco'
//    id "org.sonarqube" version "3.0"
//    id "org.hidetake.swagger.generator" version "2.18.2"
}
repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

// - P R O J E C T   D E F I N I T I O N
group = 'org.dimensinfin.printer3d'
if (file('.version').exists()) {
    version = rootProject.file('.version').text.trim()
} else {
    version = '0.0.0'
    new File(".version").text = version
}

archivesBaseName = 'printer3d-backend'

java {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

// Optional: If you want to specify the Java version for the Gradle wrapper
tasks.withType(JavaCompile) {
    options.release = 11
}

// - S O U R C E S
sourceSets {
    acceptance {
        java {
            compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath + configurations.annotationProcessor
            runtimeClasspath += output + compileClasspath
            srcDir 'src/acceptance/java'
        }
        resources.srcDir 'src/acceptance/resources'
    }
}

// - C O N F I G U R A T I O N S
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    acceptanceImplementation.extendsFrom testImplementation
    acceptanceRuntime.extendsFrom testRuntime
    acceptanceRuntimeOnly.extendsFrom testRuntimeOnly
    acceptanceAnnotationProcessor.extendsFrom testAnnotationProcessor
}

// - S P R I N G B O O T
//springBoot {
//    buildInfo()
//}
//processResources {
//    filesMatching('application.properties') {
//        expand(project.properties)
//    }
//}

// - D E P E N D E N C I E S
apply from: './dependencies.gradle'
// - C O V E R A G E
apply from: './jacoco.gradle'

// - T A S K S
tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // or DuplicatesStrategy.EXCLUDE
}
task setVersion(type: Exec) {
    description 'Stores the current assembly version into an external file.'
    group = 'release'
    workingDir "${projectDir}"
    commandLine 'gitversion', '/showvariable', 'AssemblySemFileVer'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        def result = standardOutput.toString()
        println "version > $result"
        new File(".version").text = result
    }
}
compileJava.dependsOn setVersion
bootJar.dependsOn setVersion

task generateBanner(type: Exec) {
    description 'Generates the banner matching the current version.'
    group = 'release'
    workingDir "${projectDir}"
    commandLine 'figlet', rootProject.file('.version').text.trim()
    standardOutput = new ByteArrayOutputStream()
    doLast {
        def result = standardOutput.toString()
        println "$result"
        new File(".app-banner").text = result
    }
}
generateBanner.dependsOn setVersion
compileJava.dependsOn generateBanner
bootJar.dependsOn generateBanner

task cleanResources(type: Delete, dependsOn: clean) {
    group = 'coverage'
    delete fileTree("${projectDir}/src/main/resources/docker") {
        include '**/*.jar'
    }
}
