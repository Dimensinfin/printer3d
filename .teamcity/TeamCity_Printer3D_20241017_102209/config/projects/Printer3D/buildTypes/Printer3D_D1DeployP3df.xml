<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="72825255-f768-454a-aece-dd57e0c1dfe6" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>D1.Deploy P3DF</name>
  <description>Deploy the Printer3D frontend image to Kubernetes.</description>
  <settings>
    <inherits>
      <ref id="TGenerateCommonEnvironment" />
      <ref id="TExtendEnvironment" />
    </inherits>
    <options>
      <option name="allowPersonalBuildTriggering" value="false" />
      <option name="artifactRules" value=".deploy =&gt; .deploy" />
      <option name="buildConfigurationType" value="DEPLOYMENT" />
      <option name="maximumNumberOfBuilds" value="1" />
    </options>
    <parameters>
      <param name="APP_NAME" value="Tetsuo3D-UI" />
      <param name="EXPOSE_PORT" value="30201" />
      <param name="IMAGE_NAME" value="printer3d-frontend" />
      <param name="MODULE_NAME" value="Printer3D-frontend" />
    </parameters>
    <build-runners order="S1_Get_Environment_1, simpleRunner, Generate_image_NIN">
      <runner id="Generate_image_NIN" name="S3. Deploy P3DF to Kubernetes" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[# D E P L O Y   K U B E R N E T E S
# Deploy the image to the Kubernetes namespace
#
# - variables required to be on the environment.
# APP_CODE - the application internal code.
# PROJECT_NAME - The project prefix to be used to identify project elements.
# ENVIRONMENT - the selector between a deployment and a production release.
# NAMESPACE - the destination Kubernetes namespace.
# PORT - the standard service port of the application under the declared service. It is static for an application.
# EXPOSE_PORT - the port number exposed to the localhost. It should change depending on the ENV.
# VERSION - the image version that is assigned to the pod.
# MODULE_NAME - the infinity module name. It is the long directory name of the software module.
# IMAGE_TAG - the Docker repository image tag name. Usually the module+version.

# - environment definition to be mapped on kubernetes maps
# NODE_ENV - the angular environment selected. Matches the general environment.
# APP_NAME - The application name to be shown at the UI.
# PORT - already declared.
# NODE_VERSION - the Node version being used on the pod.
# PRODUCTION - true if this is a production node.
# VERSION - already declared.
# MODULE_NAME - already declared.
# APPLICATION_HOME - the directory location where the client code is located for local service.
# BACKEND_PROXY - the url to use to access the backend services.
  
# - set environment values
export APP_CODE=%APP_CODE%
export PROJECT_NAME=%PROJECT_NAME%
export NAMESPACE=$ENVIRONMENT
export PORT=%PORT%
export EXPOSE_PORT=%EXPOSE_PORT%
export VERSION=%env.VERSION%
export MODULE_NAME=%MODULE_NAME%%
export IMAGE_TAG=%env.TAG%
export IMAGE_NAME=%IMAGE_NAME%
export KUBERNETES_NAME=%IMAGE_NAME%

export APP_NAME="%APP_NAME%"
export NODE_ENV=%env.ENVIRONMENT%

echo '>>> add configuration environment'
cd %env.WORKING_DIR%
. %env.DEPLOY_DIR%/generate.env.sh $NODE_ENV
printenv | sort
echo "<<<<<"

# - define environment map
export FRONTEND_CONFIG_MAP=`echo $MODULE_NAME'-environment' | tr '[:upper:]' '[:lower:]'`

# - Generate kubernetes deployment file from template
cat  %env.DEPLOY_DIR%/deployment.template.yaml | envsubst > %env.DEPLOY_DIR%/deployment.yaml
echo ">>> DEPLOYMENT"
cat %env.DEPLOY_DIR%/deployment.yaml
echo "<<<<<"

kubectl apply -f %env.DEPLOY_DIR%/deployment.yaml]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Printer3D_DimensinfinPrinter3d" />
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="TRIGGER_9" type="vcsTrigger">
        <parameters>
          <param name="branchFilter" value="+:refs/heads/development" />
          <param name="groupCheckinsByCommitter" value="true" />
          <param name="perCheckinTriggering" value="true" />
          <param name="quietPeriodMode" value="USE_DEFAULT" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <dependencies>
      <depend-on sourceBuildTypeId="Printer3D_C1CreateImageP3df">
        <options>
          <option name="run-build-if-dependency-failed" value="RUN_ADD_PROBLEM" />
          <option name="take-started-build-with-same-revisions" value="true" />
          <option name="take-successful-builds-only" value="true" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

