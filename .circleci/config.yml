# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# CircleCI has the ability to deploy to Heroku and integrate more than one
#   project on the same pipeline.
# V1:
# Start creationg the workflow to clone the repository, then build the 'frontend'
#   module of the project.
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: PROJECT - Check version and environment
          command: |
            node -v
      - run:
          name: CHECK - Verify if the image can start the apisimulator
          working_directory: Printer3D-frontend
          command: |
            npm install
            npm run docker:start
  create-frontend-environment-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - run:
          name: Start-Frontend Environment Validation
          command: |
            node -v
      - checkout
      - run:
          name: Validate node version in use and install
          working_directory: Printer3D-frontend
          command: |
            echo '>> Printer3D - frontend: Validate environment version and store cache'
            node -v
            npm install
      - save_cache:
          paths:
            - ~/project/Printer3D-frontend/node_modules
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
  create-backend-environment-job:
    docker:
      - image: circleci/openjdk:11.0.1-jdk
    steps:
      - checkout
      - run:
          name: Start-Backend Environment Validation
          environment:
            _JAVA_OPTIONS: "-Xmx3g"
            GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
          command: |
            ~/project/Printer3D-backend/gradlew -version
      - run:
          name: BACKEND - Build SpringBoot code
          working_directory: Printer3D-backend
          command: |
            ./gradlew clean dependencies
      - save_cache:
          paths:
            - ~/project/Printer3D-backend/.gradle
          key: printer3d-backend-{{ checksum "~/project/Printer3D-backend/gradle/wrapper/gradle-wrapper.properties" }}
  build-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      # Customize the environment values to use on the jobs
      PORT: 5100
    steps:
      - checkout
      - restore_cache:
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: Validate node version in use and install
          working_directory: Printer3D-frontend
          command: |
            node -v
            npm install
      - run:
          name: FRONTEND - Build deployment code
          working_directory: Printer3D-frontend
          command: |
            npm run build:prod
      - run:
          name: FRONTEND - Test application
          working_directory: Printer3D-frontend
          command: |
            npm run test:prod
      - save_cache:
          paths:
            - ~/project/Printer3D-frontend/node_modules
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - save_cache:
          paths:
            - ~/project/Printer3D-frontend/deploy
          key: printer3d-frontend-deploy
  acceptance-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      # Customize the environment values to use on the jobs
      PORT: 5100
    steps:
      - checkout
      - restore_cache:
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: Validate node version in use and install
          working_directory: Printer3D-frontend
          command: |
            node -v
            npm install
      - run:
          name: FRONTEND - Create the application to be tested
          working_directory: Printer3D-frontend
          command: |
            npm run build:prod
      - run:
          name: FRONTEND - Start the application server
          working_directory: Printer3D-frontend
          command: |
            node server.js
      - run:
          name: FRONTEND - Run Cypress acceptance tests
          working_directory: Printer3D-frontend
          command: |
            cypress run --record --key 9eebb605-a163-4da0-bb36-6af73faddf1b
  
  build-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          key: printer3d-backend-{{ checksum "~/project/Printer3D-backend/gradle/wrapper/gradle-wrapper.properties" }}
      - run:
          name: BACKEND - Build SpringBoot code
          working_directory: Printer3D-backend
          command: |
            ./gradlew clean bootJar
      - save_cache:
          paths: 
            - ~/project/Printer3D-backend/.gradle
          key: printer3d-backend-{{ checksum "~/project/Printer3D-backend/gradle/wrapper/gradle-wrapper.properties" }}
      - store_artifacts:
          path: ~/project/Printer3D-backend/build/libs
  test-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_USER: inno-user
          POSTGRES_DB: inno-password
    environment:
      PORT: 9500
    steps:
      - checkout
      - restore_cache:
          key: printer3d-backend-{{ checksum "~/project/Printer3D-backend/gradle/wrapper/gradle-wrapper.properties" }}
      - run:
          name: BACKEND - Start the application in local profile
          working_directory: Printer3D-backend
          environment:
            SPRING_PROFILES_ACTIVE: local
            PORT: 9500
            JDBC_DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
          command: |
            ./gradlew bootRun
      - run:
          name: BACKEND - Unit Testing application
          working_directory: Printer3D-backend
          command: |
            ./gradlew test
  frontend-stage-to-heroku:
    docker:
      - image: circleci/node:12.16.3-browsers
        environment:
          HEROKU_APP_NAME: printer3d-frontend-stage
          HEROKU_API_KEY: 0898c4c7-7389-4023-940b-ba5d7d799f73
    steps:
      - checkout
      - restore_cache:
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: FRONTEND - Install distribution
          working_directory: Printer3D-frontend
          command: |
            node -v
            sed -i '/bahmutov.add/d' package.json
            npm install
      - run:
          name: FRONTEND - Build deployment code
          working_directory: Printer3D-frontend
          command: |
            npm run build:prod
      - run:
          name: FRONTEND - Clone Heroku repository
          working_directory: Printer3D-frontend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            rm -rf .gitignore
            git add *.*
            git add config
            git add src
            git add dist
            git commit -m "-[HEROKU] Commiting code for deployment"
      - run:
          name: Deploy Master to Heroku
          working_directory: Printer3D-frontend
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master --force
  backend-stage-to-heroku:
    docker:
      - image: circleci/openjdk:11-jdk
        environment:
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
          HEROKU_APP_NAME: printer3d-backend-stage
          HEROKU_API_KEY: 0898c4c7-7389-4023-940b-ba5d7d799f73
    steps:
      - checkout
      # - run:
      #     name: BACKEND - Clone Heroku repository
      #     working_directory: Printer3D-backend
      #     command: |
      #       git config --global user.email "adamantinoo.git@gmail.com"
      #       git config --global user.name "Adam antinoo"
      #       git clone https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git
      - run:
          name: BACKEND - Update commit code
          working_directory: Printer3D-backend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            git add .gitignore
            git add *.*
            git add src
            git add gradle
            git add gradlew
            git commit -m "-[HEROKU] Commiting code for deployment"
      - run:
          name: BACKEND - Deploy Master to Heroku
          working_directory: Printer3D-backend
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master --force

  backend-prod-to-heroku:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - run:
          name: FRONTEND - Validate node version
          command: |
            node -v

workflows:
  version: 2
  printer3d-deploy:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test-frontend
                - test-backend
                - master
      - create-frontend-environment-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
      - create-backend-environment-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
      - build-frontend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - development
      - acceptance-frontend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - test-frontend-disabled
      - build-backend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - development
      - backend-stage-to-heroku:
          requires:
            - start-job
          filters:
            branches:
              only:
                - test-backend
      - frontend-stage-to-heroku:
          requires:
             - backend-stage-to-heroku
          filters:
            branches:
              only:
                - test-frontend
      # - backend-prod-to-heroku:
      #     requires:
      #       - start-job
      #     filters:
      #       tags:
      #         only: /^b[0-9]+(\.[0-9]+)*/
