# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# CircleCI has the ability to deploy to Heroku and integrate more than one
#   project on the same pipeline.
# V1:
# Start creationg the workflow to clone the repository, then build the 'frontend'
#   module of the project.
version: 2.1
jobs:
  create-frontend-environment-job:
    docker:
      - image: circleci/node:latest
    steps:
      - run:
          name: Start-Frontend Environment Validation
          command: |
            node -v
      - checkout
      - restore_cache:
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: Validate node version in use and install
          working_directory: Printer3D-frontend
          command: |
            echo '>> Printer3D - frontend: Start Continuous Integration'
            node -v
            npm install
      - save_cache:
          paths:
            - ~/project/Printer3D-frontend/node_modules
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
  validate-gradle-job:
    docker:
      - image: circleci/openjdk:11.0.1-jdk
    steps:
      - checkout
      - run:
          name: Start-Backend Environment Validation
          environment:
            # Configure the JVM and Gradle to avoid OOM errors
            _JAVA_OPTIONS: "-Xmx3g"
            GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
          command: |
            ~/project/Printer3D-backend/gradlew -version
      - run:
          name: Start-Backend Environment Validation
          environment:
            # Configure the JVM and Gradle to avoid OOM errors
            _JAVA_OPTIONS: "-Xmx3g"
            GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
          command: |
            ~/project/Printer3D-backend/gradlew -version
  start-job:
    docker:
      - image: circleci/node:latest
      - image: circleci/postgres:11.1
        environment:
          POSTGRES_DB: prnter3d_ci
          POSTGRES_USER: printer3d-user
          POSTGRES_PASSWORD: printer3d-password
      - image: circleci/openjdk:11.0.1-jdk
        environment:
          # JAVA_HOME: 
      # Configure the JVM and Gradle to avoid OOM errors
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - run:
          name: Start-Frontend Environment Validation
          command: |
            node -v
      - checkout
      - run:
          name: Start-Backend Environment Validation
          environment:
            # JAVA_HOME: 
        # Configure the JVM and Gradle to avoid OOM errors
            _JAVA_OPTIONS: "-Xmx3g"
            GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
          command: |
            # docker ps
            whereis java
            ~/project/Printer3D-backend/gradlew -version
      - run:
          name: Start-Backend Support Validation
          command: |
            echo "... Pending to get the running postgres database."
  install-frontend-job:
    docker:
      - image: circleci/node:latest
    environment:
      # Customize the environment values to use on the jobs
      PORT: 5100
    steps:
      - checkout
      - run:
          name: Validate existence of the target project
          working_directory: Printer3D-frontend
          command: |
            echo "server port: ${PORT}"
            pwd
      - restore_cache:
          keys:
            - printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - printer3d-frontend-
      - run:
          name: Validate node version in use and install
          working_directory: Printer3D-frontend
          command: |
            echo '>> Printer3D - frontend: Start Continuous Integration'
            node -v
            npm install
      - save_cache:
          paths:
            - ~/Printer3D-frontend/node_modules
          key: printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
  build-frontend-job:
    docker:
      - image: circleci/node:latest
    environment:
      # Customize the environment values to use on the jobs
      PORT: 5100
    steps:
      - checkout
      - restore_cache:
          keys:
            - printer3d-frontend-{{ checksum "~/project/Printer3D-frontend/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - printer3d-frontend-
      - run:
          name: Build the deploy version for the frontend
          working_directory: Printer3D-frontend
          command: |
            npm run build:prod
      - save_cache:
          paths:
            - ~/Printer3D-frontend/deploy
          key: printer3d-frontend-deploy
  build-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "~/project/Printer3D-backend/gradle/wrapper/gradle-wrapper.properties" }}
      - run:
          name: BACKEND - Build SpringBoot code
          working_directory: Printer3D-backend
          command: |
            ./gradlew clean build
      - save_cache:
          paths:
            - ~/project/Printer3D-backend/.gradle
          key: v1-gradle-wrapper-{{ checksum "~/project/Printer3D-backend/gradle/wrapper/gradle-wrapper.properties" }}
      - store_artifacts:
          path: ~/project/Printer3D-backend/build/libs
  create-acceptance-app-container:
    docker:
      - image: circleci/openjdk:11-jdk
      - image: circleci/postgres:11.1
    environment:
      # Customize the environment values to use on the jobs
      PORT: 5110
    steps:
      - checkout
      - restore_cache:
          keys:
            - printer3d-backend-{{ checksum "~/project/Printer3D-backend/dependencies.gradle" }}
            - printer3d-backend-
      - run:
          name: BACKEND - Create acceptance jar
          working_directory: Printer3D-backend
          command: |
            ./gradlew clean bootJar
      - run:
          name: BACKEND - Create application container
          working_directory: Printer3D-backend
          command: |
            ./docker-service.sh backend generate
      - save_cache:
          paths:
            - ~/Printer3D-backend/build
          key: printer3d-backend-{{ checksum "~/project/Printer3D-backend/docker-service.sh" }}
      - store_artifacts:
          path: ~/project/Printer3D-backend/build/libs
  start-support-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
      - image: circleci/postgres:11.1
    environment:
      # Customize the environment values to use on the jobs
      PORT: 5110
    steps:
      - checkout
      - restore_cache:
          keys:
            - printer3d-backend-{{ checksum "~/project/Printer3D-backend/dependencies.gradle" }}
            - printer3d-backend-{{ checksum "~/project/Printer3D-backend/docker-service.sh" }}
            - printer3d-backend-
      - run:
          name: BACKEND - Support checks
          working_directory: Printer3D-backend
          command: |
            echo "... Print a api simulator test."
  backend-test-job:
    docker:
      - image: circleci/openjdk:11-jdk
      - image: circleci/postgres:11.1
    environment:
      # Customize the environment values to use on the jobs
      PORT: 5110
    steps:
      - checkout
      - restore_cache:
          keys:
            - printer3d-backend-{{ checksum "~/project/Printer3D-backend/dependencies.gradle" }}
            - printer3d-backend-
      - run:
          name: BACKEND - Run unit tests + Acceptance
          working_directory: Printer3D-backend
          command: |
            ./gradlew test

workflows:
  version: 2
  printer3d-deploy:
    jobs:
      - validate-gradle-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - testing
      - start-job:
          filters:
            branches:
              only:
                - master
      - create-frontend-environment-job:
          requires:
            - validate-gradle-job
          filters:
            branches:
              only:
                - experimental
      - install-frontend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
      - build-frontend-job:
          requires:
            - install-frontend-job
          filters:
            branches:
              only:
                - development
      - build-backend-job:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
      - create-acceptance-app-container:
          requires:
            - build-backend-job
          filters:
            branches:
              only:
                - development
                - test
      - start-support-backend-job:
          requires:
            - create-acceptance-app-container
          filters:
            branches:
              only:
                - development
      - backend-test-job:
          requires:
            - start-support-backend-job
          filters:
            branches:
              only:
                - development
                - test
