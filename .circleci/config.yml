# - C I R C L E C I   C O N T I N U O U S   I N T E G R A T I O N
# Download, compile, test and deploy to the production server at Heroku.
# CircleCI has the ability to deploy to Heroku and integrate more than one
#   project on the same pipeline.
# 
# Rules:
# 1. Try to keep the front end and the back end aligned. So event they seem to be two different applications I can reduce
#    exceptions if I drop both on staging even if there are no changes on one or both of the applications. The stage
#    branch that triggers Heroku installation id "test".
# 2. There is no possibility to run docker containers. So I have to create an special configuration to start in parallel
#    the ApiSimulator on the frontend and the application for acceptance on the backend. Get back the manual start and
#    stop for the ApiSimulator and include the code on the Heroku repository only.
# 3. Test deployment go to the **stage** instances. To deploy tests we should be sure that all test checks have been passed
#    or we can deploy changes that go to stage without passing unit testing or acceptance testing. So test should do all
#    previous stages until some sort of optimization is found.
# 4. Until script adjustment acceptance is optional to allow a commit to pass stage.
#
# BRANCHES:
# 'experimental' - at this level we only require server framework validation and code compilation success.
# 'development' - identical to the experimental but server framework can be cached to be used on next levels.
# 'test' - testing level will compile the code and also run the unit, integration and acceptance tests.
# 'master' - will do the testing tasks and also the complete set of quality gates and checks on sonar servers.
# '0.x' - release tagged commits will run the deployment code to move that tagged version to the Heroku servers.
#
version: 2.1
jobs:
  start-job:
    docker:
      - image: circleci/node:12.21.0-browsers
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout

  # - F R O N T E N D
  framework-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - run:
          name: PRINTER3D-FRONTEND - Configure BIT as a source for npm
          working_directory: Printer3D-frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: PRINTER3D-FRONTEND - Install the framework
          working_directory: Printer3D-frontend
          command: |
            cp --update --verbose package.json package.json.checksum
            npm install
      - save_cache:
          paths:
            - ~/project/Printer3D-frontend/node_modules
          key: frontend-dependencies-{{ checksum "~/project/Printer3D-frontend/package.json.checksum" }}
  compile-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-dependencies-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: PRINTER3D-FRONTEND - Configure BIT as a source for npm
          working_directory: Printer3D-frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: PRINTER3D-FRONTEND - Install the framework
          working_directory: Printer3D-frontend
          command: |
            npm install
      - run:
          name: PRINTER3D-FRONTEND - Compile Angular code
          working_directory: Printer3D-frontend
          command: |
            npm run build:dev
      - save_cache: # save compiled angular code after a first compilation
          paths:
            - ~/project/Printer3D-frontend/node_modules
          key: frontend-dependencies-{{ checksum "~/project/Printer3D-frontend/package.json.checksum" }}
  validate-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    environment:
      BIT_TOKEN: d47a8f17-636f-4bda-aad9-ac9fa27fe26d
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-dependencies-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: PRINTER3D-FRONTEND - Configure BIT as a source for npm
          working_directory: Printer3D-frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: PRINTER3D-FRONTEND - Install the framework
          working_directory: Printer3D-frontend
          command: |
            npm install
      - run:
          name: PRINTER3D-FRONTEND - Compile Angular code
          working_directory: Printer3D-frontend
          command: |
            npm run build:prod
  unittest-frontend-job:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-dependencies-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: PRINTER3D-FRONTEND - Run frontend unit tests
          working_directory: Printer3D-frontend
          command: |
            npm run test:prod
      - store_test_results:
          path: ~/project/Printer3D-frontend/cypress/cucumber-json
  acceptance-test-frontend-job:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      PORT: 5100
      CYPRESS_KEY: 9eebb605-a163-4da0-bb36-6af73faddf1b
    steps:
      - checkout
      - restore_cache:
          keys:
          - frontend-dependencies-{{ checksum "~/project/Printer3D-frontend/package.json" }}
      - run:
          name: PRINTER3D-FRONTEND - Configure BIT as a source for npm
          working_directory: Printer3D-frontend
          command: |
            node -v
            npm config set @bit:registry https://node.bitsrc.io
      - run:
          name: PRINTER3D-FRONTEND - Validate the CI machine configuration
          working_directory: Printer3D-frontend
          environment:
            DOCKERIZE_VERSION: v0.3.0
          command: |
            node -v
            sudo snap install figlet
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            npm install
      - run:
          name: PRINTER3D-FRONTEND - Start frontend mock processes
          working_directory: Printer3D-frontend
          command: |
            npm run docker:start
            docker ps
            dockerize -wait tcp://localhost:5110 -timeout 1m
            docker ps
      - run:
          name: PRINTER3D-FRONTEND - Compile the integration version to be used on acceptance tests.
          working_directory: Printer3D-frontend
          command: |
            npm install
            npm run build:stage
      - run:
          name: PRINTER3D-FRONTEND - Run the list of approved acceptance tests
          working_directory: Printer3D-frontend
          command: |
            npm run acceptance:ready
            npm run acceptance:cypress:D01
            npm run acceptance:cypress:D02
            npm run acceptance:cypress:D05
            npm run acceptance:cypress:D06
            npm run acceptance:cypress:D08
            npm run acceptance:cypress:D09
            npm run acceptance:cypress:D11
            npm run acceptance:cypress:D12
            npm run acceptance:cypress:D14
            npm run acceptance:cypress:D15
            npm run acceptance:cypress:D19
            npm run acceptance:cypress:D20
            npm run acceptance:cypress:F21

  # - B A C K E N D
  cache-dependencies-backend:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run: 
          name: PRINTER3D-BACKEND - Get and cache the backend compilation dependencies
          working_directory: Printer3D-backend
          command: |
            ./gradlew dependencies --refresh-dependencies
      - save_cache:
          paths:
            - ~/Printer3D-backend/gradle
            - ~/Printer3D-backend/.gradle
          key: backend-dependencies-{{ checksum "~/project/Printer3D-backend/dependencies.gradle" }}
  compile-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
          - backend-dependencies-{{ checksum "~/project/Printer3D-backend/dependencies.gradle" }}
      - run:
          name: PRINTER3D-BACKEND - Compile SpringBoot code
          working_directory: Printer3D-backend
          command: |
            ./gradlew bootJar
  unittest-backend-job:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
          - backend-dependencies-{{ checksum "~/project/Printer3D-backend/dependencies.gradle" }}
      - run:
          name: PRINTER3D-BACKEND - Unit Testing application
          working_directory: Printer3D-backend
          environment:
            PORT: 5120
            DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
            NEOCOM_BANNER_LOCATION: "./build/resources/main/app-banner.txt"
            SPRING_PROFILES_ACTIVE: test
          command: |
            ./gradlew test
      - store_test_results:
          path: ~/project/Printer3D-backend/build/test-results
      - store_artifacts:  
          path: ~/project/Printer3D-backend/build/libs
      - save_cache:
          paths:
            - ~/project/Printer3D-backend/.gradle
            - ~/project/Printer3D-backend/build
            - ~/project/Printer3D-backend/coverage
          key: backend-build-{{ checksum "~/project/Printer3D-backend/build.gradle" }}
  acceptance-test-backend-job:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: PRINTER3D-BACKEND - Validate the CI machine configuration
          working_directory: Printer3D-backend
          environment:
            PORT: 5121
            DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
            NEOCOM_BANNER_LOCATION: "./build/resources/main/app-banner.txt"
            SPRING_PROFILES_ACTIVE: acceptance
            DOCKERIZE_VERSION: v0.3.0
          command: |
            ./gradlew --version
            sudo snap install figlet
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: PRINTER3D-BACKEND - Generate the docker file to be used for application acceptance tests
          working_directory: Printer3D-backend
          command: |
            ./docker-service.sh generate
      - run:
          name: PRINTER3D-BACKEND - Start the mock services and run tests
          working_directory: Printer3D-backend
          environment:
            DEFAULT_BACKEND_SERVER: 'http://localhost'
            DEFAULT_BACKEND_PORT: '5121'
          command: |
            ./docker-service.sh start acceptance
            docker ps
            dockerize -wait tcp://localhost:5121 -timeout 3m
            docker ps
            ./gradlew clean test
            ./gradlew acceptanceTest -Dcucumber.filter.tags="@NIB01" --info
            ./gradlew acceptanceTest -Dcucumber.filter.tags="@NIB03"
      - run:
          name: BACKEND - Waiting for application start
          working_directory: Printer3D-backend
          environment:
            PORT: 5121
            DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
            NEOCOM_BANNER_LOCATION: "./build/resources/main/app-banner.txt"
            SPRING_PROFILES_ACTIVE: acceptance
            DOCKERIZE_VERSION: v0.3.0
          command: |
            ./gradlew bootRun
          background: true
      - run:
          name: BACKEND - Waiting for application start
          environment:
            PORT: 5121
          working_directory: Printer3D-backend
          command: |
            dockerize -wait tcp://localhost:${PORT}/actuator/health -timeout 3m
      - store_test_results:
          path: ~/project/Printer3D-backend/build/test-results
      - store_artifacts:  
          path: ~/project/Printer3D-backend/build/libs

  quality-sonarcloud-backend:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - run:
          name: BACKEND - Upload SonarQube statistics
          working_directory: Printer3D-backend
          environment:
            _JAVA_OPTIONS: "-Xmx3g"
            GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
            PORT: 5140
            JDBC_DATABASE_URL: "jdbc:postgresql://0.0.0.0:5432/postgres"
            DB_USER: inno-user
            DB_PASSWORD: inno-password
            SPRING_PROFILES_ACTIVE: test
            SONAR_TOKEN: 4a8773dc6d995bc64f8d02ecfba6f9ee37a968ef
          command: |
            ./gradlew build sonarqube -Dcucumber.options="--tags @P3D00"
  quality-sonarcloud-frontend:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: FRONTEND - Install the framework
          working_directory: Printer3D-frontend
          command: |
            node -v
            npm install
      - run:
          name: FRONTEND - Upload SonarQube statistics
          working_directory: Printer3D-frontend
          environment:
            SONAR_TOKEN: 760417486be1e97e4566898079652a8ac326af3d
          command: |
            npm run sonar:prod

  stage-to-heroku:
    docker:
      - image: circleci/node:12.16.3-browsers
    steps:
      - checkout
      - run:
          name: BACKEND - Update application to Stage
          working_directory: Printer3D-backend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            git add .gitignore
            git add *.*
            git add src
            git add gradle
            git add gradlew
            git commit -m "-[HEROKU] Commiting code for deployment"
      - run:
          name: BACKEND - Deploy Master to Heroku
          working_directory: Printer3D-backend
          environment:
            HEROKU_BACKEND_APP_NAME: printer3d-backend-stage
            HEROKU_BACKEND_API_KEY: 0898c4c7-7389-4023-940b-ba5d7d799f73
          command: |
            git push https://heroku:$HEROKU_BACKEND_API_KEY@git.heroku.com/$HEROKU_BACKEND_APP_NAME.git master --force
      - run:
          name: FRONTEND - Generate deploy code for Stage
          working_directory: Printer3D-frontend
          command: |
            node -v
            sed -i '/bahmutov.add/d' package.json
            # npm install
      - run:
          name: FRONTEND - Clone Heroku repository
          working_directory: Printer3D-frontend
          command: |
            git config --global user.email "adamantinoo.git@gmail.com"
            git config --global user.name "Adam antinoo"
            git init
            rm -rf .gitignore
            git add *.*
            git add config
            git add src
            git commit -m "-[HEROKU] Commiting code for deployment"
      - run:
          name: FRONTEND - Deploy Master to Heroku
          environment:
            HEROKU_FRONTEND_APP_NAME: printer3d-frontend-stage
            HEROKU_FRONTEND_API_KEY: 0898c4c7-7389-4023-940b-ba5d7d799f73
          working_directory: Printer3D-frontend
          command: |
            git push https://heroku:$HEROKU_FRONTEND_API_KEY@git.heroku.com/$HEROKU_FRONTEND_APP_NAME.git master --force
 
workflows:
  version: 2
  printer3d-test:
    jobs:
      - start-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test
                - hotfix
                - master
      # - F R O N T E N D
      - framework-frontend-job:
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - compile-frontend-job:
          requires:
            - start-job
            - framework-frontend-job
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - validate-frontend-job:
          requires:
            - start-job
            - compile-frontend-job
          filters:
            branches:
              only:
                - development
                - test
      - unittest-frontend-job:
          requires:
            - compile-frontend-job
          filters:
            branches:
              only:
                - test
      - acceptance-test-frontend-job:
          requires:
            - compile-frontend-job
          filters:
            branches:
              only:
                - test

      # - B A C K E N D
      - cache-dependencies-backend:
          requires:
            - start-job
          filters:
            branches:
              only:
                - experimental
                - development
      - compile-backend-job:
          requires:
            - start-job
            - cache-dependencies-backend
          filters:
            branches:
              only:
                - experimental
                - development
                - test
      - unittest-backend-job:
          requires:
            - compile-backend-job
          filters:
            branches:
              only:
                - test
                - hotfixtest-front
      - acceptance-test-frontend-job:
          requires:
            - unittest-backend-job
            - compile-frontend-job
          filters:
            branches:
              only:
                - hotfix

      - quality-sonarcloud-backend:
          requires:
            - unittest-backend-job
          filters:
            branches:
              only:
                - hotfix
      - quality-sonarcloud-frontend:
          requires:
            - unittest-frontend-job
          filters:
            branches:
              only:
                - hotfix

  printer3d-deploy:
    jobs:
      - start-job:
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/

      # - F R O N T E N D
      - unittest-frontend-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - acceptance-test-frontend-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - quality-sonarcloud-frontend:
          requires:
            - unittest-frontend-job
            - acceptance-test-frontend-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/

      # - B A C K E N D
      - unittest-backend-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - acceptance-test-backend-job:
          requires:
            - start-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - quality-sonarcloud-backend:
          requires:
            - unittest-backend-job
            - acceptance-test-backend-job
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
      - stage-to-heroku:
          requires:
            - quality-sonarcloud-frontend
            - quality-sonarcloud-backend
          filters:
            tags:
              only: /0.*/
            branches:
              ignore: /.*/
