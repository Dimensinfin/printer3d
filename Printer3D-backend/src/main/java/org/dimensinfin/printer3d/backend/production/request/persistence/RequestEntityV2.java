package org.dimensinfin.printer3d.backend.production.request.persistence;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.Size;

import com.vladmihalcea.hibernate.type.basic.PostgreSQLEnumType;
import com.vladmihalcea.hibernate.type.json.JsonBinaryType;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

import org.dimensinfin.core.exception.DimensinfinRuntimeException;
import org.dimensinfin.core.utility.DimObjects;
import org.dimensinfin.printer3d.backend.production.request.rest.RequestRestErrors;
import org.dimensinfin.printer3d.client.production.rest.dto.RequestItem;
import org.dimensinfin.printer3d.client.production.rest.dto.RequestState;

/**
 * This is an entity used by the customers to report the items they want to buy. The **Request** contains the list of
 * specific Part models along with the material and color that are required by the customer. Also Requests can contain Models that are packaged
 * sets of Parts that are sell together. Requests are processed by order of arrival when the list of current open requests is solicited by the
 * frontend. The system will follow the first come/first served pattern. Then Part build jobs generated by Requests have a higher priority than
 * other jobs generated by inventory leveling.
 * A **Request** can be on different states. It starts on the state **OPEN** when the request is created. When the frontend requests the list of
 * open buy requests then it is compared against the current stock levels. If all the items on the request are available then it moves to the state
 * **COMPLETED**. If the user at the frontend delivers the request to the customer it can then close it and remove the items from the inventory. At
 * this point the request moved to the next state of  **DELIVERED** until the operator marks it as paid when then moves to the final **CLOSED**
 * state.
 * Deleted Requests are moved temporarily to the **DELETED** state.
 *
 * @author Adam Antinoo (adamantinoo.git@gmail.com)
 * @since 0.8.0
 */
@Entity
@Table(name = "requestsv2", schema = "printer3d")
@TypeDef(name = "pgsql_enum", typeClass = PostgreSQLEnumType.class)
@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
public class RequestEntityV2 {
	private static final Float IVA_TAX = 0.21F;
	@Id
	@Column(name = "id", updatable = false, nullable = false)
	private UUID id;
	@Size(min = 3, max = 50)
	@Column(name = "label", updatable = false, nullable = false)
	private String label;
	@Size(max = 500)
	@Column(name = "customer")
	private String customer;
	@Column(name = "request_date", columnDefinition = "TIMESTAMP", nullable = false)
	private Instant requestDate;
	@Column(name = "date_delivered", columnDefinition = "TIMESTAMP")
	private Instant deliveredDate;
	@Column(name = "date_paid", columnDefinition = "TIMESTAMP")
	private Instant paymentDate;
	@Enumerated(EnumType.STRING)
	@Column(name = "state", columnDefinition = "request_state", nullable = false)
	@Type(type = "pgsql_enum")
	private RequestState state = RequestState.OPEN;
	@Column(name = "paid")
	private boolean paid = false;
	@Type(type = "jsonb")
	@Column(name = "contents", columnDefinition = "jsonb")
	private List<RequestItem> contents = new ArrayList<>();
	@Column(name = "amount", nullable = false)
	private float amount = 0.0F;
	@Column(name = "iva", nullable = false)
	private float iva = 0.0F;
	@Column(name = "total", nullable = false)
	private Float total;

	// - C O N S T R U C T O R S
	private RequestEntityV2() {}

	// - G E T T E R S   &   S E T T E R S
	public float getAmount() {
		return this.amount;
	}

	public RequestEntityV2 setAmount( final float amount ) {
		this.amount = amount;
		return this;
	}

	public List<RequestItem> getContents() {
		return this.contents;
	}

	public String getCustomer() {
		return this.customer;
	}

	public Instant getDeliveredDate() {
		return this.deliveredDate;
	}

	public UUID getId() {
		return this.id;
	}

	public float getIva() {
		return this.iva;
	}

	public RequestEntityV2 setIva( final float iva ) {
		this.iva = iva;
		return this;
	}

	public String getLabel() {
		return this.label;
	}

	public Instant getPaymentDate() {
		return this.paymentDate;
	}

	public Instant getRequestDate() {
		return this.requestDate;
	}

	public RequestState getState() {
		return this.state;
	}

	public float getTotal() {
		return this.total;
	}

	public RequestEntityV2 setTotal( final Float total ) {
		this.total = total;
		return this;
	}

	/**
	 * Identifies the type of requests for the frontend classification. Requests can be open or closed on the front end but this maps to some of the
	 * possible  requests states.
	 * This method identifies **CLOSED** requests that have been delivered or/and paid.
	 */
	public boolean isClosed() {
		return ((this.state == RequestState.DELIVERED) || (this.state == RequestState.CLOSED));
	}

	/**
	 * Identifies requests that have items missing or that still have not been delivered.
	 */
	public boolean isOpen() {
		return ((this.state == RequestState.OPEN) || (this.state == RequestState.COMPLETED));
	}

	public boolean isPaid() {
		return this.paid;
	}

	public RequestEntityV2 setPaid( final boolean paid ) {
		this.paid = paid;
		return this;
	}

	@Deprecated
	public RequestEntityV2 close() {
		this.state = RequestState.CLOSED;
		this.paymentDate = Instant.now();
		return this;
	}

	@Deprecated
	public RequestEntityV2 signalCompleted() {
		this.state = RequestState.COMPLETED;
		return this;
	}

	public RequestEntityV2 signalDeleted() {
		this.state = RequestState.DELETED;
		this.deliveredDate = Instant.now();
		return this;
	}

	public RequestEntityV2 signalDelivered() {
		this.deliveredDate = Instant.now();
		if (this.paid) {
			this.state = RequestState.CLOSED;
			if (null == this.paymentDate) // Validate in case the payment date is empty
				this.paymentDate = this.requestDate;
		} else this.state = RequestState.DELIVERED;
		return this;
	}

	public RequestEntityV2 signalPaid( final Optional<Float> chargedAmount ) {
		if (chargedAmount.isPresent()) { // Use the new total amount to recalculate the final Request payment data.
			this.total = chargedAmount.get();
			this.updateAmounts();
		}
		this.state = RequestState.COMPLETED;
		return this;
	}

	public void signalPaid() {
		this.state = RequestState.CLOSED;
		this.paid = true;
		this.paymentDate = Instant.now();
	}

	public RequestEntityV2 updateAmounts() {
		this.amount = this.total / (1 + IVA_TAX);
		this.iva = this.amount * IVA_TAX;
		return this;
	}

	// - B U I L D E R
	public static class Builder {
		private final RequestEntityV2 onConstruction;

		// - C O N S T R U C T O R S
		public Builder() {
			this.onConstruction = new RequestEntityV2();
		}

		public RequestEntityV2 build() {
			DimObjects.requireNonNull( this.onConstruction.id );
			DimObjects.requireNonNull( this.onConstruction.label );
			DimObjects.requireNonNull( this.onConstruction.requestDate );
			DimObjects.requireNonNull( this.onConstruction.state );
			DimObjects.requireNonNull( this.onConstruction.total );
			this.onConstruction.updateAmounts();
			if (this.onConstruction.paid) // Set also the payment date to the current date.
				this.onConstruction.paymentDate = this.onConstruction.requestDate;
			if (this.onConstruction.contents.isEmpty())
				throw new DimensinfinRuntimeException( RequestRestErrors.errorREQUESTMISSINGFIELD( "contents" ) );
			return this.onConstruction;
		}

		public RequestEntityV2.Builder withContents( final List<RequestItem> contents ) {
			this.onConstruction.contents = DimObjects.requireNonNull( contents );
			return this;
		}

		public RequestEntityV2.Builder withCustomerData( final String customer ) {
			if (null != customer) this.onConstruction.customer = customer;
			return this;
		}

		public RequestEntityV2.Builder withId( final UUID id ) {
			this.onConstruction.id = DimObjects.requireNonNull( id );
			return this;
		}

		public RequestEntityV2.Builder withLabel( final String label ) {
			this.onConstruction.label = DimObjects.requireNonNull( label );
			return this;
		}

		public RequestEntityV2.Builder withPaid( final Boolean paid ) {
			if (null != paid) {
				this.onConstruction.paid = paid;
				if (this.onConstruction.paid) this.onConstruction.paymentDate = Instant.now();
			}
			return this;
		}

		public RequestEntityV2.Builder withRequestDate( final Instant requestDate ) {
			this.onConstruction.requestDate = DimObjects.requireNonNull( requestDate );
			return this;
		}

		public RequestEntityV2.Builder withState( final RequestState state ) {
			this.onConstruction.state = DimObjects.requireNonNull( state );
			return this;
		}

		public RequestEntityV2.Builder withTotal( final Float total ) {
			this.onConstruction.total = DimObjects.requireNonNull( total );
			return this;
		}
	}
}
