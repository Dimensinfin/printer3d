/*
 * 3D Printer Queue Management API
 * # Summary This is the OpenApi specification active and matching the latest published backend application version seen on the Heroku Production servers. This API defines all the client REST endpoints public and available to other systems. The API definition follows the OpenApi 3.0 specification and there are provisioning for automatic code generation for this API clients. The current API specification matches the Printer3D backend system published with version **0.2.0**. # API Description The API will expose the next list of entities: * **Part** - This is the definition of an item that can be sold independently. The Part is the view side from the 3D printer stand view. Parts define a tiem slot use of the 3D printer and have some cost and price attached. * ** Inventory** - This is the list of Parts declared on the system. Used as the base point to calculate stocks and generate the list of print jobs. 
 *
 * OpenAPI spec version: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.dimensinfin.printer3d.backend.domain.ColorCode;

/**
 * PartRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-21T12:43:09.826610+02:00[Europe/Madrid]")
public class PartRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id = null;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = null;

  public static final String SERIALIZED_NAME_COLOR_CODE = "colorCode";
  @SerializedName(SERIALIZED_NAME_COLOR_CODE)
  private ColorCode colorCode = null;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Float cost = null;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Float price = null;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public PartRequest id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public PartRequest label(String label) {
    this.label = label;
    return this;
  }

   /**
   * It is a human readable label to identify the product. It is a product code but that it usually it is not unique since the same part desing can be used with different finishings or colours. Cannot be changed for the lifetime of the Part and it is keyed by the user at the front end interface. 
   * @return label
  **/
  @ApiModelProperty(example = "Covid-19 Key", required = true, value = "It is a human readable label to identify the product. It is a product code but that it usually it is not unique since the same part desing can be used with different finishings or colours. Cannot be changed for the lifetime of the Part and it is keyed by the user at the front end interface. ")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public PartRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A user description of the part. It is useful but it is not mandatory. 
   * @return description
  **/
  @ApiModelProperty(value = "A user description of the part. It is useful but it is not mandatory. ")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PartRequest colorCode(ColorCode colorCode) {
    this.colorCode = colorCode;
    return this;
  }

   /**
   * Get colorCode
   * @return colorCode
  **/
  @ApiModelProperty(required = true, value = "")
  public ColorCode getColorCode() {
    return colorCode;
  }

  public void setColorCode(ColorCode colorCode) {
    this.colorCode = colorCode;
  }

  public PartRequest cost(Float cost) {
    this.cost = cost;
    return this;
  }

   /**
   * Cost estimated value in Euros with two decimals. 
   * @return cost
  **/
  @ApiModelProperty(example = "0.85", required = true, value = "Cost estimated value in Euros with two decimals. ")
  public Float getCost() {
    return cost;
  }

  public void setCost(Float cost) {
    this.cost = cost;
  }

  public PartRequest price(Float price) {
    this.price = price;
    return this;
  }

   /**
   * The requested catalog price for this Part. This price includes IVA so on bills real price should be recalculated. 
   * @return price
  **/
  @ApiModelProperty(example = "4.0", required = true, value = "The requested catalog price for this Part. This price includes IVA so on bills real price should be recalculated. ")
  public Float getPrice() {
    return price;
  }

  public void setPrice(Float price) {
    this.price = price;
  }

  public PartRequest active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * This flag is used to mark out disabled parts. Parts that are obsolete and no longer should be build are not deleted but just disabled with this flag. Disable status can be reverted editing the part. 
   * @return active
  **/
  @ApiModelProperty(required = true, value = "This flag is used to mark out disabled parts. Parts that are obsolete and no longer should be build are not deleted but just disabled with this flag. Disable status can be reverted editing the part. ")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  @Override
  public boolean equals( Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartRequest partRequest = (PartRequest) o;
    return Objects.equals(this.id, partRequest.id) &&
        Objects.equals(this.label, partRequest.label) &&
        Objects.equals(this.description, partRequest.description) &&
        Objects.equals(this.colorCode, partRequest.colorCode) &&
        Objects.equals(this.cost, partRequest.cost) &&
        Objects.equals(this.price, partRequest.price) &&
        Objects.equals(this.active, partRequest.active);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, description, colorCode, cost, price, active);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartRequest {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    colorCode: ").append(toIndentedString(colorCode)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString( Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

