---
openapi: 3.0.0
info:
  title: 3D Printer Queue Management API
  description: >
    # Summary

    ### This is the OpenApi specification active and matching the latest published backend application version seen on the Heroku Production servers.
    This API defines all the client REST endpoints public and available to other systems. The API definition follows the OpenApi 3.0 specification
    and there are provisioning for automatic code generation for this API clients.

    # System Description

    The system is composed of 4 subsystems interconnected by interchange lines. The first system represents the *external user demand*. This system
    has a catalog of items and generates a queue of Requests. This is connected to the second subsystem that is the *Storage* system. The storage
    contains the elements available to other systems or the elements to generate Parts and Models. This second system connects with the third
    subsystem called *Production* that is the responsible to calculate and control the elements to be produced and the tool to build them. The input
    are the demands from Storage to keep the stocks or to fulfill the customer Requests. And finally this reports to the four subsystem to buy
    materials and tools to maintain the Production operative and at the right levels.


    Not all the systems have an application implementation. There are two main applications. One called **frontend** to deal with the Graphical User
    Interface to create any of the items persisted on the backend and to control the Storage and another called **backend** to persist all the
    system data and to run the different Production algorithms that are required to fulfil the demands on a proper service basis.


    This API is the communication channel between the backend and the frontend and represents a contract so the two applications can be developed
    independently but having the assurance that they will interface properly when deployed into their corresponding hardware.

    # API Description

    The API will expose endpoints aggregated by the information unit. Entities under the same information unit share part of the path. For example
    the Inventory is an information unit that will report the existence of different types of elements like Parts or Materials. All these entities
    are part of the system Inventory.


    Each of the subsystems can be view as an autonomous information section sharing the same repository and server. We have currently identified
    two of those information sections, the **Inventory** and the **Production**

    ## INFORMATION UNITS

    ### INVENTORY UNIT

    Under the **Inventory** information unit we now can found some types of entities. The **Parts** are models that can be built with the other
    entity that is the plastic filament material identified by the **Material** entity. There should be a third entity called **Machine** that is
    where the plastic filament is converted on the Part. We have added a fourth element called **Model** that is a list of Parts and that allows
    for a hierarchical concept on the list of build items.

    * **Part** - This is the definition of an item that can be sold independently. The Part is the view side from the 3D printer stand view.
    Parts entities have some aspects. The principal aspect is the point where it collects the information required by the Machine to build an
    element. Parts then define the materials required for the construction and the model to use to give the material the appearance required. Parts
    define the time slot use of the 3D printer and have some cost and price attached. The Part will also store the stock information so for active
    parts this information is used to calculate the jobs pending to stabilize a stock level.

    * **Model** - A model is a collection of Parts that are required to build a new item. There are simple items that can be sell only by building
    a Part but also there are complex elements that are composed of more than one Part. Each of the Parts can have their own color and material.
    The Model has then a list of the Part references that should be composed at the UI and than can be modified but only on the list of Part
    composition.

    * **Coil** - To build a Part we require to use a plastic filament **Coil** on a 3D printer so we can print a thin plastic layer upon
    another layer until we have the model complete. The **Coils** are the storage for the plastic. It comes in long mono filament plastic lines of
    thousands of metres of length. Usually they are bought by weight.

    * **Finishing** - This is an especial response entity to collect all the distinct colors available for an specific type of material.

    * **Machine** - This is the entity that describes a 3D printer model and its configuration. The information about Machines is hardcoded at
    initialization time and the machine records can only update the current build **Part** job. Each Machine has a slot to record the current
    build action this machine is running. This data will keep track of the remaining time to complete the job and then update the stock records.

    ### PRODUCTION UNIT

    On this information unit we can find a virtual job generator that will use a set of rules to construct a list of the jobs required to reach a
    target on the **Inventory** unit. If the stock levels are below the stock limits then the missing Parts are added as build jobs until the
    number desired is reached. Other rules are able to increase or decrease this number depending on other measures or also decide the better
    schedule order for the list already generated.
    Added to the jobs generated by the inventory leveling now there another source for Jobs. The customer Requests can reduce the inventory levels
    by buying Parts and Models. One a Request is fulfilled the inventory requirements have changed and there can be new jobs pending. Jobs required
    to complete pending Requests because the stock is empty will be prioritized over stock leveling jobs.

    On the **Production** information unit we can find the list of Pending Jobs.

    * **Job** - The information required to report the 3D machine owner the necessity to build a particular **Part**. It should indicate the
    correct model and **Finishing**. There is a job for every single Part. If the machine is able to build more than one identical part at the same
    time this should be controlled on the frontend user interface.

    * **Request** - This is an entity used by the customers to report the items they want to buy. The **Request** contains the list of
    specific Part models along with the material and color that are required by the customer. Also Requests can contain Models that are packaged
    sets of Parts that are sell together. Requests are processed by order of arrival when the list of current open requests is solicited by the
    frontend. The system will follow the first come/first served pattern. Then Part build jobs generated by Requests have a higher priority than
    other jobs generated by inventory leveling.
    A **Request** can be on different states. It starts on the state **OPEN** when the request is created. When the frontend requests the list of
    open
    buy requests then it is compared against the current stock levels. If all the items on the request are available then it moves to the state
    **COMPLETED**. If the user at the frontend delivers the request to the customer it can then close is and remove the items from the inventory. At
    this point the request moved to the final state of **CLOSED**.

    ### ACCOUNTING UNIT

    This special unit will add endpoints that will be used to mine repository data to extract useful trending information or historical data.
    The first endpoint for this are the aggregated amounts billed when a Request is closed. The Request amounts are then added by week and sent to
    the fromt end for display.

    * **WeekAmount** - The aggregated amounts for all the Requests closed on a week. The proces used are the prices available when the Request was
    closed so that information was saved on the database when clsing the Request. The week records have the year to be able to display data when
    there are year change in between.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.14.0
servers:
  - url: https://printer3d-backend-stage.herokuapp.com
    description: OpenAPI 0.14.0 for 3D Printer Queue Management Backend Service. Stage environment
  - url: https://printer3d-backend.herokuapp.com
    description: OpenAPI 0.13.0 for 3D Printer Queue Management Backend Service. Production

tags:
  # - R E P O S I T O R I E S
  - name: Inventory
    description: >
      The API information unit that manages physical Inventory contents.
  - name: Production
    description: >
      The API information unit that manages the Production requirements and needs from the adjacent units of **Inventory** and **Market**.
  - name: Accounting
    description: >
      The API information unit to manage historical, trending and aggregates data mining endpoints.

paths:
  # - A C C O U N T I N G
  /api/v1/accounting/requests/amount/week:
    get:
      tags:
        - Accounting
      summary: Get the aggregated request amounts for the requests closed during a week. Get the <weekCount> most recent records.
      description: >
        Get the aggregated request amounts for the requests closed during a week. Get the <weekCount> most recent records.
      operationId: getRequestsAmountPerWeek
      parameters:
        - in: query
          name: weekCount
          required: false
          style: form
          explode: false
          description: >
            The number of weeks to send back on the result. The current week will be the first records and then the n-1 records for the previous
            weeks.
          schema:
            type: number
            format: int32
            minimum: 1
            maximum: 12
            default: 6
            example:
              6
      responses:
        200:
          description: >
            The list of weekly aggregates request amounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekAmountList'

  # - P A R T S
  /api/v1/inventory/parts:
    post:
      tags:
        - Inventory
      summary: Create a new Part from the data on the request.
      description: >
        The Printer3D user interface should have requested the Part contents to the user. This endpoint should validate all the fields against the
        validation requirements and create a new record on the Inventory repository for the new Part.
      operationId: newPart
      requestBody:
        description: >
          Contains the Part fields to be used to create a new Part record at the repository.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        404:
          description: >
            The Part selectec is not found at the persistence repository.
            * **PART_NOT_FOUND** - Part with id [{0}] not found at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensinfinError'
        409:
          description: >
            There is a conflict on the repository related to this Part. There can be some causes.
            * **PART_ALREADY_EXISTS** - The new Part identifier is already used by a repository Part. The record cannot be created.
            * **PART_REPOSITORY_CONFLICT** - There is a constraint error detected. Probably that the key fields of the Part atch the contents of an
            already existing part at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensinfinError'
    patch:
      tags:
        - Inventory
      summary: Update a Part with some of the fields on the request.
      description: >
        The Printer3D user interface now has a feature tochange some of the Part fields. Thew are mostly related with the stock values and the cost
        data. When the PATCH operation is sent to the backend all the fileds are populated but this endpoint will only get some of them and persist
        their new values on the repository.
      operationId: updatePart
      requestBody:
        description: >
          Contains the Part fields to be used to update the Part record at the repository.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
    get:
      tags:
        - Inventory
      summary: Get the list of Parts persisted at the Inventory repository.
      description: >
        Get the complete list of <b>Parts</b> persisted at the Inventory repository. If the active filter is active retrieve only the active Parts.
      operationId: getParts
      parameters:
        - in: query
          name: activesOnly
          required: false
          style: form
          explode: false
          description: >
            Allows the selection or filtering for not active Parts. By default all active parts are retrieved. If false all parts are included on the list. If tru only active parts will be returned by the filter.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: >
            The list of Parts persisted at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartList'
  /api/v1/inventory/parts/group:
    patch:
      tags:
        - Inventory
      summary: Update a group of Parts that have a common label.
      description: >
        Usually there a re a set of parts that share most of the field values changing only the finishings (material and color). Because the
        frontend will group them into sets and there is no purpose on having different values for same parts this endpoint will take care of
        changing the et values to the whole set of parts that have the same Label.
      operationId: updateGroupPart
      requestBody:
        description: >
          Contains the Part fields to be used to update the Part record at the repository.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupPartRequest'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterResponse'

  # - M O D E L S
  /api/v1/inventory/models:
    post:
      tags:
        - Inventory
      summary: Creates a new Model.
      description: >
        Creates a new Model. The initial model has no parts associated because that is edited on a second UI. On this endpoint we set all the other
        Model fields.
      operationId: newModel
      requestBody:
        description: >
          Contains the **Model** fields requested to the user on the frontend UI.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelRequest'
      responses:
        201:
          description: >
            The new Model data to be stored at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
    patch:
      tags:
        - Inventory
      summary: Updates an existing Model.
      description: >
        Updates a Model. All the fields are editable but the id. So the endpoint just replaces the contents.
      operationId: updateModel
      requestBody:
        description: >
          Contains the **Model** fields requested to the user on the frontend UI.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelRequest'
      responses:
        201:
          description: >
            The new Model data to be stored at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
    get:
      tags:
        - Inventory
      summary: Get the list of Models persisted at the Inventory repository.
      description: >
        Get the complete list of **Models** persisted at the Inventory repository.
      operationId: getModels
      responses:
        200:
          description: >
            The list of Models persisted at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
  /api/v1/inventory/models/{modelId}/addPart/{partId}:
    put:
      tags:
        - Inventory
      summary: Add a new Part reference partId to the list of Parts that compose this model.
      description: >
        The initial model has no parts associated because that is edited on a second UI. Add a new Part reference *partId* to the list of Parts
        that compose this model. If the Part is already at the model the part reference is added a second time.
      deprecated: true
      operationId: addModelPart
      parameters:
        - in: path
          name: modelId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Model that store the Part link being received.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
        - in: path
          name: partId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Part that is being added to this Model composition.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The new Model data contents stored at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
  /api/v1/inventory/models/{modelId}/removePart/{partId}:
    put:
      tags:
        - Inventory
      summary: Removes a Part reference partId from the list of Parts that compose this model.
      description: >
        This is a best effort action. If the Part identifier is not found or the part list becomes empty it is not considered an error.
      deprecated: true
      operationId: removeModelPart
      parameters:
        - in: path
          name: modelId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Model that store the Part link being removed.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
        - in: path
          name: partId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Part that is being removed from this Model composition.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The new Model data contents stored at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'

  # - C O I L S
  /api/v1/inventory/coils:
    post:
      tags:
        - Inventory
      summary: Creates a new Coil instance on the persistence repository.
      description: >
        The 3D printers need and use plastic filament to build the models. The Coils have as main characteristics the type of plastic, the color
        and the quantity of the material.
        Now coils also belong to a color group so when the machine selects the plastic it will select it from any of the coils on the same group
        and not from a single coil.
      operationId: newCoil
      requestBody:
        description: >
          Contains the **Coil** fields requested to the user on the frontend UI.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coil'
      responses:
        201:
          description: >
            The new Coil is stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coil'
    patch:
      tags:
        - Inventory
      summary: Updates an existing Coil.
      description: >
        Updates a Coil. The fields allowed to be changed are the **weight** and now the **color** label.
        The **active** field can be changed automatically when the coil is empty or by the user to reject a coil.
      operationId: updateCoil
      requestBody:
        description: >
          Contains the **Coil** fields that come from the GUI with the new Coil data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCoilRequest'
      responses:
        200:
          description: >
            The new Coil data updated with the new received data and the values at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coil'
  /api/v2/inventory/coils:
    get:
      tags:
        - Inventory
      summary: Get the list of Coils persisted at the Inventory repository.
      description: >
        Get the complete list of **Coils** persisted at the Inventory repository.
      operationId: getCoils
      responses:
        200:
          description: >
            The list of Coils persisted at the Inventory repository.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coil'

  # - F I N I S H I N G S
  /api/v1/inventory/finishings:
    get:
      tags:
        - Inventory
      summary: Returns the list of Materials with the colors available for each one.
      description: >
        The endpoint collects the materials and colors from all the stock of available coils. Collects the data and sorts the colors before packing
        them to be retuned to the frontend.
      operationId: getFinishings
      responses:
        200:
          description: >
            The current list of finishings constructed with the coils available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinishingsResponse'

  # - M A C H I N E S
  /api/v1/inventory/machines/{machineId}/cancelbuild:
    put:
      tags:
        - Inventory
      summary: Signals the cancellation of the current build.
      description: >
        With this command the **Machine** will be recorded as ready. This cancellation command has not to be related toa real cancellation at the
        real 3D printer. Maybe used to correct the current job being performed by the real printer.
      operationId: cancelBuild
      parameters:
        - in: path
          name: machineId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Machine we are requesting to cancel the build job.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The registration of the build cancellation is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
  /api/v1/inventory/machines/{machineId}/completeBuild:
    put:
      tags:
        - Inventory
      summary: Signals the completion of the current build.
      description: >
        With this command the **Machine** will complete the current job. This will change the Part stock levels adding to the current Part stock
        the number of Parts already built. Then the Machine will return to the IDLE state.
        The Job registered on the Machine is then persisted to a nee backend repository to create an analysis record to be able to perform
        production statistics with the completed jobs.
      operationId: completeBuild
      parameters:
        - in: path
          name: machineId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Machine we are requesting to complete the build job.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The registration of the build cancellation is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
  /api/v2/inventory/machines:
    get:
      tags:
        - Inventory
      summary: Gets the list of Machines defined on the system and persisted on the Inventory unit.
      description: >
        Gets the Machine entity and then searches for the current running job if it exists. If the **getCurrentJobPartId()** does not
        return a Part then the **BuildRecord** is cleared and then the machine entity converted to the return record.

        Parts can change while the Part is being used on the job and this can affect the job build time. So the code should isolate from this
        change by storing the build time onto the Machine BuildRecord for later retrieval so this data is not affected by Part changes.
      operationId: getMachinesv2
      responses:
        200:
          description: >
            The list of Machines persisted on the repository and each one of them with a build record. Inside the record there is the information
            to know if there is a job running or it is empty and in the case of a job running the timing information about it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineList'
  /api/v2/inventory/machines/{machineId}/startbuild:
    post:
      tags:
        - Inventory
      summary: Signals the registration and start of a new build job.
      description: >
        With this command the **Machine** will be active and building one new instance of the referenced Part model. The front end will not allow
        setting new jobs until this ends or it is cancelled.
        At this moment the plastic quantity that is required to build the Part is subtracted from a Coil with the same finishing. If there are more
        than a single coil with the same finishing one of them is used indistinctly.
      operationId: startBuild
      requestBody:
        description: >
          The endpoint receives a new Job Request that has some of the key job identifiers. The new implementation allows to set the number of
          identical copies of the Part so the inventory can be updated precisely with each job completed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
      parameters:
        - in: path
          name: machineId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Machine that will execute the build job.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The registration of the build start is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'

  # - R E Q U E S T S
  /api/v2/production/requests:
    post:
      tags:
        - Production
      summary: Creates a new Request instance at the persistence repository.
      description: >
        This is an entity used by the customers to report the items they want to buy. The **Request** contains the list of
            specific Part models along with the material and color that are required by the customer. Also Requests can contain Models that are packaged
            sets of Parts that are sell together. Requests are processed by order of arrival when the list of current open requests is solicited by the
            frontend. The system will follow the first come/first served pattern. Then Part build jobs generated by Requests have a higher priority than
            other jobs generated by inventory leveling.
            A **Request** can be on different states. It starts on the state **OPEN** when the request is created. When the frontend requests the list of
            open
            buy requests then it is compared against the current stock levels. If all the items on the request are available then it moves to the state
            **COMPLETED**. If the user at the frontend delivers the request to the customer it can then close is and remove the items from the inventory. At
            this point the request moved to the final state of **CLOSED**.
      operationId: newRequest
      requestBody:
        description: >
          Contains the **Request** field values filled at the UI.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestV2'
      responses:
        201:
          description: >
            The new Request as transformed from the persistence repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestV2'
        400:
          description: >
            If the request to create a new requst has not all the required fields or they do not pass the validations then we reject the request
            with a bad format request exception. The response message should explain the cause for the rejection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensinfinError'
    patch:
      tags:
        - Production
      summary: Updates an Open Request instance at the persistence repository.
      description: >
        An open Request can be edited at the UI. The user can decide to reduce the number of Parts initially requested or he can add or remove
        Parts from the Request. Once the Request is completed and closed it is not editable..
      operationId: updateRequest
      requestBody:
        description: >
          Contains the **Request** field values filled at the UI.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestV2'
      responses:
        200:
          description: >
            The new Request as transformed from the persistence repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestV2'
    get:
      tags:
        - Production
      summary: Get the list of Requests persisted at the repository.
      description: >
        Get the complete list of **Requests** persisted at the Production repository and that are on an Open state.
        This method is compatible with the implementation of Requests V1 until the repository V1 is deprecated and defiled.
        The process now extends to support Models that are packs of Parts. The new extension expands the list from the Model BOM to check agains
        the current stock of Parts to check for run out of instances. Complete requests continue to be marked COMPLETED.
        During the processing each of the requests in FIFO sequence is processed against the Part stocks. If there are stocks for all the Parts in
        the request the state changes to COMPLETED during this request. The Part stocks are updated for each Request processed.
      operationId: getOpenRequests
      responses:
        200:
          description: >
            The list of Requests in the Open state as transformed from the repository stored copy.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestV2'
    delete:
      tags:
        - Production
      summary: Delete the selected Request form the repository.
      description: >
        Requests have no other relations with repository records so they can be deleted safely. If the user select to remove a Request because it
        should be modified of because no longer required the record ban be deleted without impact. Only OPEN Requests can be deleted. CLOSED are no
        longer available for update or deletion.
      operationId: deleteRequest
      parameters:
        - in: path
          name: requestId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Request we should delete.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The request is completely deleted with a success result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CounterResponse'
        404:
          description: >
            The request is not found on the repositories. The cause could be that the same Request was deleted before on another session.

            * **REQUEST_NOT_FOUND** - No Request found while trying to delete the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensinfinError'
        409:
          description: >
            The Request to be deleted was not on the correct COMPLETED state. There are missing Parts for this request so it can not be deleted.

            * **REQUEST_NOT_IN_CORRECT_STATE** - Request record with id [{0}] is not on the correct state to perform the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensinfinError'

  /api/v2/production/requests/{requestId}/close:
    put:
      tags:
        - Production
      summary: Closes the state of a selected Request.
      description: >
        When the Request is closed is the moment where the Parts that compose the request are subtracted from the Parts inventory. The close should
        be able to close requests on the old repository and also on the new repository. So the identifier should be searched on both repositories
        to locate the right instance to be closed.
      operationId: closeRequest
      parameters:
        - in: path
          name: requestId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Request we are closing.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            Returns the current state of the Request on the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestV2'
        404:
          description: >
            If the request searched by the request id is not found on neither of the v1 or v2 repositories then we should raise this exception.
            This has to be reported to the system administrator because there can show a data corruption problem.
            Other cause can be that the Request has been closed before on another session and that frontend data is stale.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensinfinError'

  # - J O B S
  /api/v1/production/jobs/pending:
    get:
      tags:
        - Production
      summary: Create the list of jobs required to reach the targets.
      description: >
        The pending list of jobs now has two targets. On the first priority level it is the fulfilment of all the Open Requests. Requests are then
        processed on order of arrival and if there are not enough Parts on the inventory to complete a Request then that missing Parts generate
        build jobs that should be completed on high priority.
        The second target is then add the jobs to complete the inventory levels. For that the system will search the **Inventory** needs and stocks
        mismatches to create a list of the Parts missing to reach the correct stocks levels for each part and each finishing.
        ## RULES
        1. Jobs generated by Request missing parts have priority 1.
        2. Jobs generated by stock leveling have priority 2.
        3. Within priority 2 jobs sort by finishing count being the finishing with more hits up on the list.
      operationId: getPendingJobs
      responses:
        200:
          description: >
            The list of jobs to reach the target.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobList'

# - S C H E M A S
components:
  schemas:
    Part:
      type: object
      required:
        - id
        - label
        - colorCode
        - buildTime
        - cost
        - price
        - stockLevel
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            This is a frontend generated unique uuid assigned when the Part is created. It cannot be changed on the Part lifecycle and it is used
            as the single unique identifier to deal with the Part or its derivatives.
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            It is a human readable label to identify the product. It is a product code but that it usually it is not unique since the same part
            design can be used with different finishings or colours. Cannot be changed for the lifetime of the Part and it is keyed by the user at
            the front end interface.
          example:
            Covid-19 Key
        description:
          type: string
          format: string
          maxLength: 500
          description: >
            A user description of the part. It is useful but it is not mandatory.
          example:
            'This is a key to be used to isolate contact with surfaces and buttons. Use it to open doors and push buttons.'
        material:
          type: string
          format: string
          minLength: 1
          maxLength: 16
          description: >
            It is the acronym or code for the type of plastic. There are different types of plastics for different uses and some of them require an
            specialized machine or a particular machine configuration.
          example:
            PLA
        color:
          type: string
          format: string
          minLength: 1
          maxLength: 32
          description: >
            The color name for the plastic on the coil. A coil should have this field as mandatory
          example:
            VERDE-T
        weight:
          type: number
          format: int32
          default: 1
          minimum: 1
          maximum: 400
          description: >
            This is the weigth in grames consumed by the Machine to build one instance of this Part.
          example:
            12
        buildTime:
          type: number
          format: int32
          default: 5
          description: >
            This field stores the time in minutes that lasts the 3d printer job to finish.
          example:
            15
        cost:
          type: number
          format: float
          description: >
            Cost estimated value in Euros with two decimals.
          example:
            0.85
        price:
          type: number
          format: float
          description: >
            The requested catalog price for this Part. This price includes IVA so on bills real price should be recalculated.
          example:
            4.00
        stockLevel:
          type: number
          format: int32
          default: 1
          description: >
            This is the value set as the stock level desired to have on the storage.
          example:
            3
        stockAvailable:
          type: number
          format: int32
          default: 0
          description: >
            This is the current stock value of the number of pieces available to sell.
          example:
            4
        imagePath:
          type: string
          format: url
          description: >
            The URL for an external image stored on a public repository or Google drive. This image will be used when showing the catalog.
          example:
            'https://ibb.co/3dGbsRh'
        modelPath:
          type: string
          format: string
          description: >
            The file name os the model to be used on the printer to be used on the printer job.
          example:
            'pieza3.STL'
        active:
          type: boolean
          format: boolean
          default: true
          description: >
            This flag is used to mark out disabled parts. Parts that are obsolete and no longer should be build are not deleted but just disabled
            with this flag. Disable status can be reverted editing the part.
          example:
            true
    PartList:
      type: object
      required:
        - count
        - parts
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of parts that follow on the response.
          example:
            8
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
    UpdateGroupPartRequest:
      type: object
      properties:
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            It is a human readable label to identify the product. It is a product code but that it usually it is not unique since the same part
            design can be used with different finishings or colours. Cannot be changed for the lifetime of the Part and it is keyed by the user at
            the front end interface.
          example:
            Covid-19 Key
        description:
          type: string
          format: string
          maxLength: 500
          description: >
            A user description of the part. It is useful but it is not mandatory.
          example:
            'This is a key to be used to isolate contact with surfaces and buttons. Use it to open doors and push buttons.'
        weight:
          type: number
          format: int32
          default: 1
          minimum: 1
          maximum: 400
          description: >
            This is the weigth in grames consumed by the Machine to build one instance of this Part.
          example:
            12
        buildTime:
          type: number
          format: int32
          default: 5
          description: >
            This field stores the time in minutes that lasts the 3d printer job to finish.
          example:
            15
        imagePath:
          type: string
          format: url
          description: >
            The URL for an external image stored on a public repository or Google drive. This image will be used when showing the catalog.
          example:
            'https://ibb.co/3dGbsRh'
        modelPath:
          type: string
          format: string
          description: >
            The file name os the model to be used on the printer to be used on the printer job.
          example:
            'pieza3.STL'

    Machine:
      type: object
      required:
        - id
        - label
        - model
      properties:
        id:
          type: string
          format: uuid
          description: >
            The unique identifier for a single machine. Used for machine-job identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            The user readable label to be assigned to a single Machine. Can be used instead of the unique identifier UUID.
          example:
            'Machine A'
        model:
          type: string
          format: string
          maxLength: 64
          description: >
            The model type of the 3D printer Machine.
          example:
            'Creality 3D Ender 3 Pro'
        characteristics:
          type: string
          format: string
          maxLength: 300
          description: >
            A free text with the list of the machine characteristics like special configurations, limits or sizes.
          example:
            'Max size set to 200mm. Has adaptor for flexible plastic filament.'
        currentJobPart:
          allOf:
            - $ref: '#/components/schemas/Part'
        currentPartInstances:
          type: number
          format: int32
          minimum: 1
          default: 1
          description: >
            The is the number of exact identical parts are being built at the same time on a single printer job.
          example:
            1
        jobInstallmentDate:
          type: string
          format: date-time
          description: >
            The date and time when the job was stared on the machine. The Part infrormation says the time it is expected that the machine will be
            occupied by this job. If the current time is greater that this point it is expected that the job has finished.
          example:
            2020-06-01T22:05:00Z
    MachineList:
      type: array
      items:
        $ref: '#/components/schemas/MachineV2'
    MachineV2:
      type: object
      description: >
        The record that describes a **Machine** and their current status. If a machine is running a build job then there is some more information
        persisted on the repository record and also reflected on the exported api.
      required:
        - id
        - label
        - model
        - buildRecord
      properties:
        id:
          type: string
          format: uuid
          description: >
            The unique identifier for a single machine. Used for machine-job identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            The user readable label to be assigned to a single Machine. Can be used instead of the unique identifier UUID.
          example:
            'Machine A'
        model:
          type: string
          format: string
          maxLength: 64
          description: >
            The model type of the 3D printer Machine.
          example:
            'Creality 3D Ender 3 Pro'
        characteristics:
          type: string
          format: string
          maxLength: 300
          description: >
            A free text with the list of the machine characteristics like special configurations, limits or sizes.
          example:
            'Max size set to 200mm. Has adaptor for flexible plastic filament.'
        buildRecord:
          $ref: '#/components/schemas/BuildRecord'
    BuildRecord:
      type: object
      description: >
        When the machine has a running job this record reflects the **Part** being built and the timing information about when the job was
        submitted and the time left to completion of the job. Date references are kept local to the backs so there is no date format conversion on
        the api interchange.
      required:
        - state
      properties:
        state:
          type: string
          enum:
            - IDLE
            - RUNNING
          default: IDLE
          description: >
            This is a virtual api field that will reflect the state of the Machine so the front end will not have to relay on any logic to detect
            idle or running machines.

            * **IDLE** - The Machine has no job running.

            * **RUNNING** - There is a Part being built. Once this job completes the Machine continues on this state until the next request where
            the record is updated and the stocks updated.
        part:
          description: >
            The part reference that is being built. If the Machine is IDLE then this field contains **null**.
          allOf:
            - $ref: '#/components/schemas/Part'
        partCopies:
          type: number
          format: int32
          minimum: 1
          default: 1
          description: >
            The is the number of exact identical parts are being built at the same time on a single printer job.
          example:
            1
        jobInstallmentDate:
          type: string
          format: date-time
          description: >
            The date and time when the job was stared on the machine. The Part information says the time it is expected that the machine will be
            occupied by this job. If the current time is greater that this point it is expected that the job has finished.
            If the machine is IDLE then this field contains **null**.
          example:
            2020-06-01T22:05:00Z
        remainingTime:
          type: number
          format: int32
          minimum: 0
          description: >
            Represents the number of minutes left between the **jobInstallmentDate** and the current date. If this number is 0 or negative then the
            job is completed. Detecting this event will clear the Machine state to IDLE and update the stocks.
          example:
            18

    ModelRequest:
      type: object
      required:
        - id
        - label
        - price
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a Model.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            It is a human readable label to identify the Model. Once set it cnnot be modified to disallow the reuse of model entities. Models can
            be deactivated and then are not eligible for handling or production.
          example:
            Boquilla Ganesha
        price:
          type: number
          format: float
          minimum: 0
          description: >
            The requested catalog price for this Model. This price includes IVA so on bills real price should be recalculated. The final Model
            price will not have the same as the sum of the individual parts that compose it.
          example:
            4.00
        stockLevel:
          type: number
          format: int32
          default: 1
          minimum: 1
          description: >
            This is the value set as the stock level desired to have on the storage.
          example:
            3
        stockAvailable:
          type: number
          format: int32
          default: 0
          minimum: 0
          description: >
            This is the current stock value of the number of pieces available to sell.
          example:
            4
        imagePath:
          type: string
          format: url
          maxLength: 200
          description: >
            The URL for an external image stored on a public repository or Google drive. This image will be used when showing the catalog.
          example:
            'https://ibb.co/3dGbsRh'
    ModelList:
      type: array
      items:
        #        $ref: '#/components/schemas/WeekAmount'
        #      type: object
        #      required:
        #        - count
        #        - models
        #      properties:
        #        count:
        #          type: number
        #          format: int32
        #          description: >
        #            The number of Models that follow on the response.
        #          example:
        #            8
        #        models:
        #          type: array
        #          items:
        $ref: '#/components/schemas/Model'
    Model:
      type: object
      required:
        - id
        - label
        - partList
        - price
        - stockLevel
        - active
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a Model.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            It is a human readable label to identify the Model. Once set it cnnot be modified to disallow the reuse of model entities. Models can
            be deactivated and then are not eligible for handling or production.
          example:
            Boquilla Ganesha
        partList:
          type: array
          items:
            $ref: '#/components/schemas/Part'
          description: >
            The list of the Parts that compose the Model. The stock quantity set to the model will be added to the list
            of required parts to be on stock so the Part can be managed independently of the model.
          example:
            [ '009ab011-03ad-4e84-9a88-25708d1cfd64', '009ab011-03ad-4e84-9a88-25708d1cfd64' ]
        price:
          type: number
          format: float
          minimum: 0
          description: >
            The requested catalog price for this Model. This price includes IVA so on bills real price should be recalculated. The final Model
            price will not have the same as the sum of the individual parts that compose it.
          example:
            4.00
        stockLevel:
          type: number
          format: int32
          default: 1
          minimum: 1
          description: >
            This is the value set as the stock level desired to have on the storage.
          example:
            3
        imagePath:
          type: string
          format: url
          maxLength: 200
          description: >
            The URL for an external image stored on a public repository or Google drive. This image will be used when showing the catalog.
          example:
            'https://ibb.co/3dGbsRh'
        active:
          type: boolean
          format: boolean
          default: true
          description: >
            This flag is used to mark out disabled Models. Models that are obsolete and no longer should be build are not deleted but just disabled
            with this flag. Disable status can be reverted editing the Model at the UI.
          example:
            true

    Coil:
      type: object
      required:
        - id
        - material
        - color
        - colorSet
        - weight
        - active
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single coil. Used for job identification when used on a machine. We should attach a label with this
            identifier to the coil for visual identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        material:
          type: string
          format: string
          minLength: 1
          maxLength: 16
          description: >
            It is the acronym or code for the type of plastic. There are different types of plastics for different uses and some of them require an
            specialized machine or a particular machine configuration.
          example:
            PLA
        color:
          type: string
          format: string
          minLength: 1
          maxLength: 32
          description: >
            The color name for the plastic on the coil. A coil should have this field as mandatory
          example:
            VERDE-T
        colorSet:
          type: string
          format: string
          minLength: 1
          maxLength: 32
          description: >
            The color set name to which this Colil belongs. The color name as a label can be changed but this tag is related to a set of coils sharing the same color and then cannot be changed once the coil is created.
          example:
            VERDE
        weight:
          type: string
          format: int32
          minimum: 0
          maximum: 2000
          default: 1000
          description: >
            The weight of the coil when bought. Initially this field is not being used for logistics purposes but would be needed to remove coils
            from the inventory when they have their weight under a predetermined level. The unit or representation is grames.
          example:
            1000
        active:
          type: boolean
          default: true
          description: >
            The current coil availability state. Empty, rejected or defectuous coils can be moved to the 'false' state and then can be cleared from the listing with some filters.
          example:
            true
    UpdateCoilRequest:
      type: object
      required:
        - id
        - weight
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single coil. ON this enpoint used to locate the Coil to be updated.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        weight:
          type: string
          format: int32
          minimum: 0
          maximum: 2000
          default: 1000
          description: >
            The new coil weight as reported by the user on the GUI. The unit or representation is grames.
          example:
            1000
        color:
          type: string
          format: string
          minLength: 1
          maxLength: 32
          description: >
            The color name for the plastic on the coil. A coil should have this field as mandatory
          example:
            VERDE-T
        active:
          type: boolean
          default: true
          description: >
            The current coil availability state. Empty, rejected or defectuous coils can be moved to the 'false' state and then can be cleared from the listing with some filters.
          example:
            true

    FinishingsResponse:
      type: object
      required:
        - materials
      properties:
        materials:
          type: array
          items:
            $ref: '#/components/schemas/Finishing'
          description: >
            The list of unique plastic filament materials ordered alphabetically ascending.
    Finishing:
      type: object
      required:
        - material
        - colors
      properties:
        material:
          type: string
          format: string
          minLength: 1
          maxLength: 16
          description: >
            This is the material name as records on the **Coil** record. Used to collect all this same material colors.
          example:
            'PLA'
        colors:
          type: array
          items:
            $ref: '#/components/schemas/Colors'
          description: >
            The list of unique colors for active coils ordered alphabetically descending.
          example:
            [ 'BLANCO', 'NEGRO', 'ROJO' ]

    Job:
      type: object
      required:
        - id
        - partId
        - copies
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single coil. Used for job identification when used on a machine. We should attach a label with this
            identifier to the coil for visual identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        partId:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier of the **Part** referenced by this job. This links this job with the rest of the Part data.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        copies:
          type: number
          format: int32
          default: 1
          description: >
            The number of copies of the same part that are going to be built in this job. This value also changes the job run time. If a single
            Part takes 30 minutes to be built then 4 parts will take four times longer.
          example:
            3
        priority:
          type: number
          format: int32
          description: >
            This if the job priority set to be used. There are different sources for jobs, requests or stock level. So to indicate the user the
            most important jobs then we need this additional field. The default priority is 3 but it is not being used. Jobs generated from
            leveling have a priority 2 and jobs from Requests that need missing Parts have a priority of 1.
          default: 3
          example:
            3
    JobRequest:
      type: object
      description: >
        This is the structure used to send the job information from the frontend when requesting to start a new build job. This structure is like
        the Job that is generated when the user requests the list of jobs pending build, but this uses a Part identifier while the other uses the
        full Part data among other small differences. This is a dto structure only for input.
      required:
        - id
        - partId
        - copies
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single coil. Used for job identification when used on a machine. We should attach a label with this
            identifier to the coil for visual identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        partId:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier of the **Part** referenced by this job. This links this job with the rest of the Part data.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        copies:
          type: number
          format: int32
          default: 1
          description: >
            The number of copies of the same part that are going to be built in this job. This value also changes the job run time. If a single
            Part takes 30 minutes to be built then 4 parts will take four times longer.
          example:
            3
    JobList:
      type: object
      required:
        - count
        - jobs
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of Jobs that follow on the response.
          example:
            8
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'

    RequestV2:
      type: object
      description: >
        This is the data structure that is received/sent over the HTTP interface. When the user creates or changes the Request the service will
        receive a copy of this structure and then return an updated and persisted copy.
        Version 2 requests are able to contain any type of element and not only Parts. The contents definitions then changes to allow this different
        way to store the request contents information. Persisted records of version 2 are not compatible with persisted records of version 1 so
        records of version 1 are expected to be closed and not to be returned on the request.
        If anyway the system still has V1 records they are converted to the V2 format (part identifiers are wrapped again) and then processed and
        reported to the frontend.
      required:
        - id
        - requestDate
        - label
        - contents
        - state
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single Request. Once a request is closed cannot be edited so the user will need to create a new instance.
            This field is used for primary keying the requests.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        requestDate:
          type: string
          format: date-time
          description: >
            The date and time when the Request is submitted to the backend. Used for request ordering on the FIFO request list.
          example:
            2020-06-01T22:05:00Z
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            The user readable label to be assigned to a single Machine. Can be used instead of the unique identifier UUID.
          example:
            'Machine A'
        contents:
          type: array
          items:
            $ref: '#/components/schemas/RequestItem'
        state:
          type: string
          enum:
            - OPEN
            - COMPLETED
            - CLOSED
          default: OPEN
          description: >
            Requests that should be sent to the customer but that still have missing Parts should stay at the OPEN state until the Request is
            completed and it is served. When the transaction completes then the requests moves to the CLOSED state and then cannot be changed.
            State descriptions:
            * **OPEN** - The Requests are created on this state. This is the value stored at the database while the Request is not closed. Open
            requests are listed to the frontend and at that moment they can change to COMPLETED if there are enough Parts.
            * **COMPLETED** - This is the state reflected when the Request is listed to the frontend. This state is not stored at the repository.
            Means that the Request can be served to the customer and then closed.
            * **CLOSED** - The Request has been sent to the customer and the Parts removed from the inventory stock. This is the final state for
            the Request.
    RequestItem:
      type: object
      description: >
        Now a Request item can be of different types. So there is a need to use an isolation class that will contain the neutral data and be ale to
        locate the detail record form the right repository. So the list of Parts now is transformed to a list of items.
        A request item then has the type of item and the quantity of the same items.
      required:
        - itemId
        - type
        - quantity
      properties:
        itemId:
          $ref: '#/components/schemas/UUID'
        type:
          type: string
          enum:
            - PART
            - MODEL
          description: >
            This field differentiates the repository element pointed by the id. Being the id formats common the type will inform from which
            repository to extract the item data details.
          example:
            MODEL
        quantity:
          type: number
          format: int32
          default: 1
          minimum: 1
          description: >
            The number of copies of the item that are requested. Each sellable item that has any difference to any other sellable item has a unique
            identifier. Copies means the number of exact elements with the same identifier.
          example:
            3

    WeekAmountList:
      type: array
      items:
        $ref: '#/components/schemas/WeekAmount'
    WeekAmount:
      type: object
      properties:
        year:
          type: number
          format: int32
          minimum: 2019
          default: 2020
          description: >
            Year of the week aggregation.
          example:
            2020
        week:
          type: number
          format: int32
          minimum: 1
          maximum: 52
          description: >
            The year week for an aggregation.
          example:
            28
        amount:
          type: number
          format: float
          minimum: 0.0
          description: >
            The total amount for all the Requests closed during this week.
          example:
            48.10

    UUID:
      type: string
      format: uuid
      description: UUID version 4 unique random identifier
      pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      example:
        4e7001ee-6bf5-40b4-9c15-61802e4c59ea
    Colors:
      type: array
      items:
        type: string
        format: string
        minLength: 1
        maxLength: 32
    CounterResponse:
      type: object
      properties:
        records:
          type: number
          format: int32
          description: >
            The number of records processed by the previous operation. Applies to deletions and also to updates.
          example:
            3

    DimensinfinError:
      type: object
      properties:
        errorName:
          type: string
          format: string
          description: >
            This literal is the coded name of the exception. There are two classes of exceptions, the wrapped system exceptions lile SQL errors and
            the application login exceptions that are catalogued and sometimes are expected.
            This is a unique identifier across all the exception hierarchy.
          example:
            REQUEST_CANNOT_BE_FULFILLED
        status:
          $ref: '#/components/schemas/HttpStatus'
        errorCode:
          type: string
          format: string
          description: >
            This is a dot composed string with a categorization of the exception on the category tree that applies to this application or to any
            other application that shares the common exceptions. Two different exceptions can have the same 'errorCode' but different 'errorName'
            for example because they are generated on different actions or on different entity classes.
          example:
            printer3d.defined.logic.exception
        message:
          type: string
          format: string
          description: >
            The exception message. Usually this message is parametrized so it can insert key information about the affected instance. This message
            should be localized and the localization is the 'errorName'.
          example:
            'Part record with id [] not found at the repository.'
        cause:
          type: string
          format: string
          description: >
            Sometimes the same exception can be triggered by different causes of even this information comes from external system exceptions.
            This field is optional and not informed on most of the exceptions.
          example:
            'Repository exception while inserting resource.'
    HttpStatus:
      type: object
      properties:
        statusCode:
          type: number
          format: int32
          description: >
            This is one of the catalogued HTTP return error codes ('https://www.restapitutorial.com/httpstatuscodes.html'). This is the numeric
            format for the http error code.
          example:
            404
        statusName:
          type: string
          format: string
          description: >
            The string representation (from the current HTTP library) for the http error code.
          example:
            NOT FOUND
