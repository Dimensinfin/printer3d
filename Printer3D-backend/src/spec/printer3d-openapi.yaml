---
openapi: 3.0.0
info:
  title: 3D Printer Queue Management API
  description: >
    # Summary

    ### This is the OpenApi specification active and matching the latest published backend application version seen on the Heroku Production servers.
    This API defines all the client REST endpoints public and available to other systems. The API definition follows the OpenApi 3.0 specification
    and there are provisioning for automatic code generation for this API clients.

    ##
    The current API specification matches the Printer3D backend system published with version **0.4.2**.

    # System Description

    The system is composed of 4 subsystems interconnected by interchange lines. The first system represents the external user demand. They
    have a catalog of Parts and generate a queue of Requests. This is connected to the second subsystem that is the Storage system. The storage
    contains the elements available to other systems or the elements to generate Parts. This second system connects with the third subsystem called
    Production that is the responsible to calculate and control the elements to be produced and the tool to build them. The input are the demand of
    Storage to keep the stocks or to fulfill the Requests. And finally this reports to the four subsystem to buy materials and tools to maintain
    the Production operative and at the right levels.


    Not all the systems have an application implementation. There are two main applications. One called **frontend** to deal with the Graphical User
    Interface to create Reports and to control the Storage and another called **backend** to persist all the system data and to run the different
    Production algorithms that are required.


    This API is the communication channel between the backend and the frontend and represents a contract so the two applications can be developed
    independently but having the assurance that they will interface properly when deployed into their corresponding hardware.

    # API Description

    The API will expose endpoints aggregated by the information unit. Entities under the same information unit shre part of the path. For example
    the Inventory is an information unit that will report the existence of different types of elements like Parts or Materials. All these entities
    are part of the system Inventory.


    Each of the subsystems can be view as an autonomous information section sharing the same repository and server. We have currently identified
    two of those information sections, the **Inventory** and the **Production**

    ## INFORMATION UNITS

    ### INVENTORY UNIT

    Under the **Inventory** information unit we now can found two entities. The **Parts** are models that can be built with the other entity
    that are the plastic filament material identified by the **Material** entity. There should be a third entity called **Machine** that is where
    the plastic filament is converted on the Part.

    * **Part** - This is the definition of an item that can be sold independently. The Part is the view side from the 3D printer stand view. Parts
    define the time slot use of the 3D printer and have some cost and price attached. The Part will also store the stock information so for active
    parts this information is used to calculate the jobs pending to stabilize a stock level.

    * **Coil** - To build a Part we require to use a plastic filament **Coil** on a 3D printer so we can print a thin plastic layer upon
    another layer until we have the model complete. The **Coils** are the storage for the plastic. It comes in long mono filament plastic lines of
    thousands of metres of length. Usually they are bought by weight.

    * **Finishing** - This is an especial response entity to collect all the distinct colors available for an specific type of material.

    * **Machine** - This is the entity that describes a 3D printer model and its configuration. The information about Machines is hardcoded at
    initialization time and the machine records can only update the current buil **Part** job.

    ### PRODUCTION UNIT

    On this information unit we can find a virtual job generator that will use a set of rules to construct a list of the jobs required to reach a
    target on the **Inventory** unit. If the stock levels are below the stock limits then the missing Parts are added as build jobs until the
    number desired is reached. Other rules are able to increase or decrease this number depending on other measures or also decide the better
    schedule order for the list already generated.

    On the **Production** information unit we can find the list of Pending Jobs.

    * **PendingJob** - The information required to report the 3D machine owner the necessity to build a particular **Part**. It should indicate the
    correct model and **Finishing**. There is a job for every single Part. If the machine is able to build more than one identical part at the same
    time this should be controller at other information unit.


  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.4.2
servers:
  - url: https://printer3d-backend-stage.herokuapp.com
    description: OpenAPI 0.4.2 for 3D Printer Queue Management Backend Service. Stage environment
  - url: https://printer3d-backend.herokuapp.com
    description: OpenAPI 0.4.2 for 3D Printer Queue Management Backend Service. Production

tags:
  ### R E P O S I T O R I E S
  - name: Inventory
    description: >
      The API information unit that manages physical Inventory contents.
  - name: Production
    description: >
      The API information unit that manages the Production requirements and needs from the adjacent units of **Inventory** and **Market**.
  ### E N T I T I E S
  - name: Parts
    description: >
      The Part creation, update and general management endpoints.
  - name: Material
    description: >
      The tag for the endpoints for Coil and material management.
  - name: Machines
    description: >
      The management of machines and their features to control jobs.

paths:
  ### P A R T S
  /api/v1/inventory/parts:
    post:
      tags:
        - Inventory
      summary: Create a new Part from the data on the request.
      description: >
        The Printer3D user interface should have requested the Part contents to the user. This endpoint should validate all the fields against the
        validation requirements and create a new record on the Inventory repository for the new Part.
      operationId: newPart
      requestBody:
        description: >
          Contains the Part fields to be used to create a new Part record at the repository.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
    get:
      tags:
        - Inventory
      summary: Get the list of Parts persisted at the Inventory repository.
      description: >
        Get the complete list of <b>Parts</b> persisted at the Inventory repository. If the active filter is active retrieve only the active Parts.
      operationId: getParts
      parameters:
        - in: query
          name: activesOnly
          required: false
          style: form
          explode: false
          description: >
            Allows the selection or filtering for not active Parts. By default all active parts are retrieved. If false all parts are included on the list. If tru only active parts will be returned by the filter.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: >
            The list of Parts persisted at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartList'

  /api/v1/inventory/parts/{partId}:
    patch:
      tags:
        - Parts
      summary: Update an alrady existing Part. Only some of the fields are allowed for update. The rest of the fields are ignored.
      description: >
        Process a request to update an existing Part on the repository by giving the new field contents. Only the allowed modifiable contents are
        processed and the other fields are ignored.
      operationId: updatePart
      parameters:
        - in: path
          name: partId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) for the Part to be edited.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      requestBody:
        description: >
          The new contents for the Part record.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
      responses:
        200:
          description: >
            The new list of Parts at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'

  ### R O L L S
  /api/v1/inventory/coils:
    post:
      tags:
        - Inventory
      summary: Creates a new **Coil** instance on the persistence repository.
      description: >
        The 3D printers need and use plastic filament to build the models. The Coils have as main characteristics the type of plastic, the color
        and the quantity of the material.
      operationId: newCoil
      requestBody:
        description: >
          Contains the *Coil** fields requested to the user on the frontend UI.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coil'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coil'
    get:
      tags:
        - Inventory
      summary: Get the list of Coils persisted at the Inventory repository.
      description: >
        Get the complete list of **Coils** persisted at the Inventory repository.
      operationId: getCoils
      responses:
        200:
          description: >
            The list of Coils persisted at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoilList'

  ### F I N I S H I N G S
  /api/v1/inventory/finishings:
    get:
      tags:
        - Inventory
      summary: Returns the list of Materials with the colors available for each one.
      description: >
        The endpoint collects the materials and colors from all the stock of available coils. Collects the data and sorts the colors before packing
        them to be retuned to the frontend.
      operationId: getFinishings
      responses:
        200:
          description: >
            The current list of finishings constructed with the coils available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinishingsResponse'

  ### M A C H I N E S
  /api/v1/inventory/machines:
    get:
      tags:
        - Inventory
      summary: Gets the list of **Machines** defined on the system and persisted on the Inventory unit.
      description: >
        Machines do not change frequently so there is no need to have their UI. The Machine records are created manually but anyway the system is
        able to return their list form the repository.
        When the list of Machine records is collected from the repository the fields for job installation time are checked. If the elapsed time
        from this recorded time is less than the current time, then the job is expected to have finished. At this moment the machine is cleared and
        the part count for the target **Part** job is increased in the number of instances built.
      operationId: getMachines
      responses:
        202:
          description: >
            The list of **Machines** persisted at the repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineList'
  /api/v1/inventory/machines/{machineId}/startbuild/{partId}:
    put:
      tags:
        - Inventory
      summary: Signals the registration and start of a new build job.
      description: >
        With this command the **Machine** will be active and building one new instance of the referenced Part model. The front end will not allow
        setting new jobs until this ends or it is cancelled.
      operationId: startBuild
      parameters:
        - in: path
          name: machineId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Machine that will execute the build job.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
        - in: path
          name: partId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Part item to be built.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The registration of the build start is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
  /api/v1/inventory/machines/{machineId}/cancelbuild:
    put:
      tags:
        - Inventory
      summary: Signals the cancellation of the current build.
      description: >
        With this command the **Machine** will be recorded as ready. This cancellation command has not to be related toa real cancellation at the
        real 3D printer. Maybe used to correct the current job being performed by the real printer..
      operationId: cancelBuild
      parameters:
        - in: path
          name: machineId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) of the Machine we are requesting to cancel the build job.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      responses:
        200:
          description: >
            The registration of the build cancellation is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'

  ### P E N D I N G J O B S
  /api/v1/production/jobs/pending:
    get:
      tags:
        - Production
      summary: Create the list of jobs required to reach the **Inventory** target.
      description: >
        Search the **Inventory** needs and stocks missmatchs to create a list of the Parts missing to reach the correct stocks levels for each part
        and each color.
        This version also has the rule 1 to show contiguous all parts with the same material type and color and same priority.
        Also applies the rule 2 to show contiguous jobs that use the same model if there rule 1 does not applies.
      operationId: getPendingJobs
      responses:
        200:
          description: >
            The list of jobs to reach the target.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobList'

components:
  schemas:
    Part:
      type: object
      required:
        - id
        - label
        - colorCode
        - buildTime
        - cost
        - price
        - stockLevel
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            This is a frontend generated unique uuid assigned when the Part is created. It cannot be changed on the Part lifecycle and it is used
            as the single unique identifier to deal with the Part or its derivatives.
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            It is a human readable label to identify the product. It is a product code but that it usually it is not unique since the same part
            desing can be used with different finishings or colours. Cannot be changed for the lifetime of the Part and it is keyed by the user at
            the front end interface.
          example:
            Covid-19 Key
        description:
          type: string
          format: string
          maxLength: 500
          description: >
            A user description of the part. It is useful but it is not mandatory.
          example:
            'This is a key to be used to isolate contact with surfaces and buttons. Use it to open doors and push buttons.'
        colorCode:
          $ref: '#/components/schemas/ColorCode'
        buildTime:
          type: number
          format: int32
          default: 5
          description: >
            This field stores the time in minutes that lasts the 3d printer job to finish.
          example:
            15
        cost:
          type: number
          format: float
          description: >
            Cost estimated value in Euros with two decimals.
          example:
            0.85
        price:
          type: number
          format: float
          description: >
            The requested catalog price for this Part. This price includes IVA so on bills real price should be recalculated.
          example:
            4.00
        stockLevel:
          type: number
          format: int32
          default: 1
          description: >
            This is the value set as the stock level desired to have on the storage.
          example:
            3
        stockAvailable:
          type: number
          format: int32
          default: 0
          description: >
            This is the current stock value of the number of pieces available to sell.
          example:
            4
        imagePath:
          type: string
          format: url
          description: >
            The URL for an external image stored on a public repository or Google drive. This image will be used when showing the catalog.
          example:
            'https://ibb.co/3dGbsRh'
        modelPath:
          type: string
          format: string
          description: >
            The file name os the model to be used on the printer to be used on the printer job.
          example:
            'pieza3.STL'
        active:
          type: boolean
          format: boolean
          default: true
          description: >
            This flag is used to mark out disabled parts. Parts that are obsolete and no longer should be build are not deleted but just disabled
            with this flag. Disable status can be reverted editing the part.
          example:
            true
    PartList:
      type: object
      required:
        - count
        - parts
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of parts that follow on the response.
          example:
            8
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'

    Machine:
      type: object
      required:
        - id
        - label
        - model
      properties:
        id:
          type: string
          format: uuid
          description: >
            The unique identifier for a single machine. Used for machine-job identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        label:
          type: string
          format: string
          maxLength: 32
          description: >
            The user readable label to be assigned to a single Machine. Can be used instead of the unique identifier UUID.
          example:
            'Machine A'
        model:
          type: string
          format: string
          maxLength: 64
          description: >
            The model type of the 3D printer Machine.
          example:
            'Creality 3D Ender 3 Pro'
        characteristics:
          type: string
          format: string
          maxLength: 300
          description: >
            A free text with the list of the machine characteristics like special configurations, limits or sizes.
          example:
            'Max size set to 200mm. Has adaptor for flexible plastic filament.'
        currentJobPart:
          allOf:
            - $ref: '#/components/schemas/Part'
        currentPartInstances:
          type: number
          format: int32
          minimum: 1
          default: 1
          description: >
            The is the number of exact identical parts are being built at the same time on a single printer job.
          example:
            1
        jobInstallmentDate:
          type: string
          format: date-time
          description: >
            The date and time when the job was stared on the machine. The Part infrormation says the time it is expected that the machine will be
            occupied by this job. If the current time is greater that this point it is expected that the job has finished.
          example:
            2020-06-01T22:05:00Z
    MachineList:
      type: object
      required:
        - count
        - machines
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of machines that follow on the response.
          example:
            8
        machines:
          type: array
          items:
            $ref: '#/components/schemas/Machine'

    Coil:
      type: object
      required:
        - id
        - material
        - color
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single coil. Used for job identification when used on a machine. We should attach a label with this
            identifier to the coil for visual identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        material:
          type: string
          format: string
          minLength: 1
          maxLength: 16
          description: >
            It is the acronym or code for the type of plastic. There are different types of plastics for different uses and some of them require an
            specialized machine or a particular machine configuration.
          example:
            PLA
        color:
          type: string
          format: string
          minLength: 1
          maxLength: 32
          description: >
            The color name for the plastic on the coil. A coil should have this field as mandatory
          example:
            VERDE-T
        weight:
          type: string
          format: int32
          minimum: 0
          maximum: 2000
          default: 1000
          description: >
            The weight of the coil when bought. Initially this field is not being used for logistics purposes but would be needed to remove coils
            from the inventory when they have their weight under a predetermined level. The unit or representation is grames.
          example:
            1000
    CoilList:
      type: object
      required:
        - count
        - coils
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of Coils that follow on the response.
          example:
            8
        coils:
          type: array
          items:
            $ref: '#/components/schemas/Coil'

    FinishingsResponse:
      type: object
      required:
        - materials
      properties:
        materials:
          type: array
          items:
            $ref: '#/components/schemas/Finishing'
          description: >
            The list of unique plastic filament materials ordered alphabetically ascending.
    Finishing:
      type: object
      required:
        - material
        - colors
      properties:
        material:
          type: string
          format: string
          minLength: 1
          maxLength: 16
          description: >
            This is the material name as records on the **Coil** record. Used to collect all this same material colors.
          example:
            'PLA'
        colors:
          type: array
          items:
            $ref: '#/components/schemas/Colors'
          description: >
            The list of unique colors for active coils ordered alphabetically descending.
          example:
            ['BLANCO', 'NEGRO', 'ROJO']

    Job:
      type: object
      required:
        - id
        - part_id
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single coil. Used for job identification when used on a machine. We should attach a label with this
            identifier to the coil for visual identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        part_id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier of the **Part** referenced by this jobs. This links this job with all the Part data.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64

    JobList:
      type: object
      required:
        - count
        - jobs
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of PendingJobs that follow on the response.
          example:
            8
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'

    ColorCode:
      type: string
      enum:
        - WHITE
        - GREEN
        - GREEN-TRANSP
        - RED
        - LIGHT-BLUE
        - PINK-TRANSP
        - ORANGE-TRANSP
      description: >
        It is a short color code to be appended to the label for part identification. For the machine build job and the stock the color is a
        most important element since differentiates two identical parts at the model level.
    UUID:
      type: string
      format: uuid
      description: UUID version 4 unique random identifier
      pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      example:
        4e7001ee-6bf5-40b4-9c15-61802e4c59ea
    Colors:
      type: array
      items:
        type: string
        format: string
        minLength: 1
        maxLength: 32
