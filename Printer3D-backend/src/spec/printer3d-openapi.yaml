---
openapi: 3.0.0
info:
  title: 3D Printer Queue Management API
  description: >
    # Summary

    ### This is the OpenApi specification active and matching the latest published backend application version seen on the Heroku Production servers.
    This API defines all the client REST endpoints public and available to other systems. The API definition follows the OpenApi 3.0 specification
    and there are provisioning for automatic code generation for this API clients.

    ##
    The current API specification matches the Printer3D backend system published with version **0.4.0**.

    # API Description

    The API will expose endpoints aggregated by the information unit. Entities under the same information unit shre part of the path. For example
    the Inventory is an information unit that will report the existence of different types of elements liek Parts or Materials. All these entities
    are part of the system Inventory.

    On other information units we can find other not so real entities like pending jobs or user request for materials or any other data request.

    Under the *+Inventory** information unit we now can found two entities. The **Parts** are models that can be built with the other entity
    that are the plastic filament material identified by the **Material** entity. There should be a third entity called **Machine** that is where
    the plastic filament is converted on the Part.

    * **Part** - This is the definition of an item that can be sold independently. The Part is the view side from the 3D printer stand view. Parts
    define the time slot use of the 3D printer and have some cost and price attached. The Part will also store the stock information so for active
    parts this information is used to calculate the jobs pending to stabilize a stock level.

    * **Roll** - To build a Part we require to use a plastic filament **Roll** on a 3D printer so we can print a thin plastic layer upon
    another layer until we have the model complete. The **Rolls** are the storage for the plastic. It comes in long mono filament plastic lines of
    thousands of metres of length. Usually they are bought by weight.

    * **Finishing** - This is an especial response entity to collect all the distinct colors available for an specific type of material.

    * **Machine** - This is the entity that describes a 3D printer model and its configuration.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.2.0
servers:
  - url: https://printerd-backend.herokuapp.com
    description: OpenAPI 0.1.0 for 3D Printer Queue Management Backend Service

tags:
  ### R E P O S I T O R I E S
  - name: Inventory
    description: >
      The API information section that manages physical Inventory contents.
  ### E N T I T I E S
  - name: Parts
    description: >
      The Part creation, update and general management endpoints.
  - name: Material
    description: >
      The tag for the endpoints for Roll and material management.
  - name: Machines
    description: >
      The management of machines and their features to control jobs.

paths:
  ### P A R T S
  /api/v1/inventory/parts:
    post:
      tags:
        - Inventory
        - Parts
      summary: Create a new Part from the data on the request.
      description: >
        The Printer3D user interface should have requested the Part contents to the user. This endpoint should validate all the fields against the
        validation requirements and create a new record on the Inventory repository for the new Part.
      operationId: newPart
      requestBody:
        description: >
          Contains the Part fields to be used to create a new Part record at the repository.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
    get:
      tags:
        - Inventory
      summary: Get the list of Parts persisted at the Inventory repository.
      description: >
        Get the complete list of <b>Parts</b> persisted at the Inventory repository. If the active filter is active retrieve only the active Parts.
      operationId: partList
      parameters:
        - in: query
          name: activesOnly
          required: false
          style: form
          explode: false
          description: >
            Allows the selection or filtering for not active Parts. By default all active parts are retrieved. If false all parts are included on the list. If tru only active parts will be returned by the filter.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: >
            The list of Parts persisted at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartList'

  /api/v1/inventory/parts/{partId}:
    patch:
      tags:
        - Parts
      summary: Update an alrady existing Part. Only some of the fields are allowed for update. The rest of the fields are ignored.
      description: >
        Process a request to update an existing Part on the repository by giving the new field contents. Only the allowed modifiable contents are
        processed and the other fields are ignored.
      operationId: updatePart
      parameters:
        - in: path
          name: partId
          required: true
          style: simple
          explode: false
          description: The unique id (uuid) for the Part to be edited.
          schema:
            type: string
            format: uuid
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
      requestBody:
        description: >
          The new contents for the Part record.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
      responses:
        200:
          description: >
            The new list of Parts at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'

  ### R O L L S
  /api/v1/inventory/rolls:
    post:
      tags:
        - Inventory
      summary: Creates a new **Roll** instance on the persistence repository.
      description: >
        The 3D printers need and use plastic filament to build the models. The rolls have as main characteristics the type of plastic, the color
        and the quantity of the material.
      operationId: newRoll
      requestBody:
        description: >
          Contains the *Roll** fields requested to the user on the frontend UI.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roll'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roll'
    get:
      tags:
        - Inventory
      summary: Get the list of Rolls persisted at the Inventory repository.
      description: >
        Get the complete list of **Rolls** persisted at the Inventory repository.
      operationId: getRolls
      responses:
        200:
          description: >
            The list of Rolls persisted at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RollList'

  /api/v1/inventory/finishings:
    get:
      tags:
        - Inventory
      summary: Returns the list of Materials with the colors available for each one.
      description: >
        The endpoint collects the materials and colors from all the stock of available rolls. Collects the data and sorts the colors before packing
        them to be retuned to the frontend.
      operationId: finishingList
      responses:
        200:
          description: >
            The current list of finishings constructed with the rolls available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinishingsResponse'

  ### M A C H I N E S
  /api/v1/inventory/machines:
    post:
      tags:
        - Inventory
        - Machines
      summary: Creates a new Machine service.
      description: >
        The Printer3D user interface requests the information to the user to create and setup a new Machine and its configuration. Machines are
        able to build parts from jobs that may have special requirements and dependencies ties to the Machine configuration.
      operationId: newMachine
      requestBody:
        description: >
          Contains the Machine identifier and configuration fields to be used to create a new Machine record at the repository.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
      responses:
        201:
          description: >
            The new Part as stored at the Inventory repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'

components:
  schemas:
    Part:
      type: object
      required:
        - id
        - label
        - colorCode
        - buildTime
        - cost
        - price
        - stockLevel
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            This is a frontend generated unique uuid assigned when the Part is created. It cannot be changed on the Part lifecycle and it is used
            as the single unique identifier to deal with the Part or its derivatives.
          example:
            4e7001ee-6bf5-40b4-9c15-61802e4c59ea
        label:
          type: string
          format: string
          minLength: 3
          maxLength: 50
          description: >
            It is a human readable label to identify the product. It is a product code but that it usually it is not unique since the same part
            desing can be used with different finishings or colours. Cannot be changed for the lifetime of the Part and it is keyed by the user at
            the front end interface.
          example:
            Covid-19 Key
        description:
          type: string
          format: string
          maxLength: 500
          description: >
            A user description of the part. It is useful but it is not mandatory.
          example:
            'This is a key to be used to isolate contact with surfaces and buttons. Use it to open doors and push buttons.'
        colorCode:
          $ref: '#/components/schemas/ColorCode'
        buildTime:
          type: number
          format: int32
          default: 5
          description: >
            This field stores the time in minutes that lasts the 3d printer job to finish.
          example:
            15
        cost:
          type: number
          format: float
          description: >
            Cost estimated value in Euros with two decimals.
          example:
            0.85
        price:
          type: number
          format: float
          description: >
            The requested catalog price for this Part. This price includes IVA so on bills real price should be recalculated.
          example:
            4.00
        stockLevel:
          type: number
          format: int32
          default: 1
          description: >
            This is the value set as the stock level desired to have on the storage.
          example:
            3
        stockAvailable:
          type: number
          format: int32
          default: 0
          description: >
            This is the current stock value of the number of pieces available to sell.
          example:
            4
        imagePath:
          type: string
          format: url
          description: >
            The URL for an external image stored on a public repository or Google drive. This image will be used when showing the catalog.
          example:
            'https://ibb.co/3dGbsRh'
        modelPath:
          type: string
          format: string
          description: >
            The file name os the model to be used on the printer to be used on the printer job.
          example:
            'pieza3.STL'
        active:
          type: boolean
          format: boolean
          default: true
          description: >
            This flag is used to mark out disabled parts. Parts that are obsolete and no longer should be build are not deleted but just disabled
            with this flag. Disable status can be reverted editing the part.
          example:
            true
    PartList:
      type: object
      required:
        - count
        - parts
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of parts that follow on the response.
          example:
            8
        parts:
          type: array
          items:
            $ref: '#/components/schemas/Part'
    Machine:
      type: object
      required:
        - id
        - model
      properties:
        id:
          type: string
          format: uuid
          description: >
            The unique identifier for a single machine. Used for machine-job identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        label:
          type: string
          format: string
          description: >
            The user readable label to be assigned to a single Machine. Can be used instead of the unique identifier UUID.
          example:
            'Machine A'
        model:
          type: string
          format: string
          description: >
            The model type of the 3D printer Machine.
          example:
            'Creality 3D Ender 3 Pro'
        plasticType:
          type: string
          enum:
            - PLA
            - FLEXIBLE
    MachineList:
      type: object
      required:
        - count
        - machines
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of machines that follow on the response.
          example:
            8
        machines:
          type: array
          items:
            $ref: '#/components/schemas/Machine'

    Roll:
      type: object
      required:
        - id
        - material
        - color
      properties:
        id:
          type: string
          format: uuid
          pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
          description: >
            The unique identifier for a single roll. Used for job identification when used on a machine. We should attach a label with this
            identifier to the roll for visual identification.
          example:
            009ab011-03ad-4e84-9a88-25708d1cfd64
        material:
          type: string
          format: string
          minLength: 1
          maxLength: 16
          description: >
            It is the acronym or code for the type of plastic. There are different types of plastics for different uses and some of them require an
            specialized machine or a particular machine configuration.
          example:
            PLA
        color:
          type: string
          format: string
          minLength: 1
          maxLength: 32
          description: >
            The color name for the plastic on the roll. A roll should have this field as mandatory
          example:
            VERDE-T
        weight:
          type: string
          format: int32
          minimum: 0
          maximum: 2000
          default: 1000
          description: >
            The weight of the roll when bought. Initially this field is not being used for logistics purposes but would be needed to remove rolls
            from the inventory when they have their weight under a predetermined level. The unit or representation is grames.
          example:
            1000
    RollList:
      type: object
      required:
        - count
        - rolls
      properties:
        count:
          type: number
          format: int32
          description: >
            The number of Rolls that follow on the response.
          example:
            8
        rolls:
          type: array
          items:
            $ref: '#/components/schemas/Roll'

    FinishingsResponse:
      type: object
      required:
        - materials
      properties:
        materials:
          type: array
          items:
            $ref: '#/components/schemas/Finishing'
          description: >
            The list of unique plastic filament materials ordered alphabetically ascending.
    Finishing:
      type: object
      required:
        - material
        - colors
      properties:
        material:
          type: string
          format: string
          minLength: 1
          maxLength: 16
          description: >
            This is the material name as records on the **Roll** record. Used to collect all this same material colors.
          example:
            'PLA'
        colors:
          type: array
          items:
            $ref: '#/components/schemas/Colors'
          description: >
            The list of unique colors for active rolls ordered alphabetically descending.
          example:
            ['BLANCO', 'NEGRO', 'ROJO']

    ColorCode:
      type: string
      enum:
        - WHITE
        - GREEN
        - GREEN-TRANSP
        - RED
        - LIGHT-BLUE
        - PINK-TRANSP
        - ORANGE-TRANSP
      description: >
        It is a short color code to be appended to the label for part identification. For the machine build job and the stock the color is a
        most important element since differentiates two identical parts at the model level.
    UUID:
      type: string
      format: uuid
      description: UUID version 4 unique random identifier
      pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      example:
        4e7001ee-6bf5-40b4-9c15-61802e4c59ea
    Colors:
      type: array
      items:
        type: string
        format: string
        minLength: 1
        maxLength: 32
